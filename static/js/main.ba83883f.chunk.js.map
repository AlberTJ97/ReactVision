{"version":3,"sources":["components/layout/menu/MainMenuItem.js","components/layout/logo/Logo.js","components/layout/menu/MainMenu.js","components/layout/info/histogram/HistogramInfo.js","components/layout/info/histogram/Histogram.js","components/layout/info/histogram/ImageInfo.js","components/layout/windows/Window.js","components/theme/index.js","components/layout/info/Info.js","processor/image/ProcessImage.js","processor/IO/ImageFileLoader.js","components/layout/error/ErrorHandler.js","components/layout/actions/LoadImageAction.js","components/layout/actions/SaveImageAction.js","processor/operations/point/LookUpTable.js","processor/operations/point/lineal/BlackAndWhite.js","components/layout/actions/point/lineal/BlackAndWhite.js","processor/operations/point/lineal/LinealFunction.js","processor/operations/point/lineal/LinealPicewiseAdjustment.js","components/layout/actions/point/lineal/LinealPicewiseAdjustment.js","processor/operations/point/lineal/BrightnessAndContrast.js","components/layout/actions/point/lineal/BrightnessAndContrast.js","processor/operations/point/non-lineal/HistogramEqualization.js","components/layout/actions/point/non-lineal/HistogramEqualization.js","processor/operations/point/non-lineal/HistogramSpecification.js","components/layout/actions/point/non-lineal/HistogramSpecification.js","processor/operations/point/non-lineal/GammaCorrection.js","components/layout/actions/point/non-lineal/GammaCorrection.js","processor/operations/point/non-lineal/ImageDifference.js","components/layout/actions/point/non-lineal/ImageDifference.js","processor/operations/point/non-lineal/ChangesDetection.js","components/layout/actions/point/non-lineal/ChangesDetection.js","components/layout/actions/point/non-lineal/cross-image/CrossImageGraph.js","processor/operations/point/non-lineal/ImageCrossSelection.js","components/layout/actions/point/non-lineal/cross-image/CrossImageSelection.js","processor/operations/point/non-lineal/ImageQuantizer.js","processor/operations/point/non-lineal/ImageResampler.js","components/layout/actions/point/non-lineal/ImageQuantization.js","processor/operations/geometric/VerticalFlipProcessor.js","processor/operations/geometric/HorizontalFlipProcessor.js","components/layout/actions/geometric/ImageFlipper.js","processor/operations/geometric/TransposedProcessor.js","components/layout/actions/geometric/TransposedImage.js","processor/operations/geometric/Scaling.js","processor/operations/geometric/interpolator/Interpolator.js","processor/operations/geometric/interpolator/NearestNeighbourInterpolator.js","processor/operations/geometric/interpolator/BilinealInterpolator.js","components/layout/actions/geometric/Scaling.js","processor/operations/geometric/ImageRotation.js","components/layout/actions/geometric/RotateImage.js","processor/operations/geometric/rotation/Rotation.js","processor/operations/geometric/rotation/RawRotation.js","processor/operations/geometric/rotation/InterpolatedRotation.js","components/layout/actions/geometric/Rotation.js","components/layout/actions/ActionPicker.js","components/layout/actions/Action.js","components/layout/image-workspace/ImageTabs.js","components/layout/image-workspace/WorkspaceBar.js","components/layout/image-workspace/ImageWorkspace.js","components/layout/footer/index.js","processor/image/Histogram.js","processor/controller/ImageController.js","App.js","index.js"],"names":["MainMenuItem","state","anchorEl","open","handleToggle","_this","setState","handleClose","event","contains","target","optionId","id","props","updateAction","handleOutClose","_this2","this","_this$props","options","title","react_default","a","createElement","Button_default","buttonRef","node","aria-owns","undefined","aria-haspopup","onClick","Popper_default","transition","disablePortal","_ref","TransitionProps","placement","Grow_default","Object","assign","style","transformOrigin","Paper_default","ClickAwayListener_default","onClickAway","MenuList_default","map","option","MenuItem_default","key","name","Component","Logo","className","href","MainMenu","items","Toolbar_default","logo_Logo","item","menu_MainMenuItem","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","width","colors","HistogramInfo","color","labelWidth","handleChange","value","difference","filter","x","includes","onColorOptions","ReactDOM","findDOMNode","InputLabelRef","offsetWidth","_this$props$options","disableColors","accumulative","red","green","blue","classes","FormControlLabel_default","control","Switch_default","checked","onChange","onBrightnessOption","label","FormControl_default","variant","formControl","InputLabel_default","ref","htmlFor","Select_default","multiple","input","OutlinedInput_default","renderValue","selected","join","Checkbox_default","indexOf","ListItemText_default","primary","withStyles","theme","root","display","flexWrap","margin","spacing","unit","minWidth","maxWidth","chips","chip","noLabel","marginTop","withTheme","r","g","b","brightness","HistogramGraph","emphasizedValue","histogramVisualizationData","getSeries","component","histogram","currentHistogram","data","getFormattedData","getDataSeries","es","curve","opacity","justifyContent","position","height","top","left","ImageInfo","rows","variable","getImageProperty","property","getImage","getHistogramProperty","toFixed","nextProps","Table_default","padding","TableHead_default","TableRow_default","TableCell_default","align","TableBody_default","slice","length","row","scope","Window","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isClosed","handleCloseEvent","windowCount","flex","marginLeft","children","createMuiTheme","palette","light","main","dark","contrastText","secondary","typography","useNextVariants","TabContainer","dir","Typography_default","Info","renderHistogram","controller","getCurrentHistogram","histogram_Histogram","handleBrightnessVisualization","handleHistogramVisualization","handleColorsVisualization","colorOn","colorOff","forEach","defineProperty","toLowerCase","windows_Window","AppBar_default","Tabs_default","centered","Tab_default","direction","histogram_HistogramInfo","onHistogramOption","histogram_ImageInfo","backgroundColor","background","paper","ProcessImage","getTitle","getFormat","format","getNumberOfStates","dataHistory","isAnyState","createNewState","getCurrentStateData","setNewState","getWidth","getHeight","createNewBlankState","arrayLength","i","push","newState","dataHistoryIndex","pop","setInitialState","setPreviousState","setNextState","getImageData","ImageData","Uint8ClampedArray","getCurrentState","getNumberOfPixels","indexesAreInRange","y","getColorIndex","getComponent","setComponent","getColor","getBrightness","numericComponent","colorComponent","Error","index","setColor","colorIsInRange","setBrightness","getRedComponent","setRedComponent","getGreenComponent","setGreenComponent","getBlueComponent","setBlueComponent","getAlphaComponent","setAlphaComponent","alpha","rgb","getRGBComponents","Math","round","setRGBComponents","getRGBAComponents","setRGBAComponets","replace","split","dataHistorySizes","MIN_PIXEL_VALUE","MAX_PIXEL_VALUE","ImageFileLoader","getReadFile","image","setImage","shape","fileName","imageData","inputNode","callback","files","file","isAnImage","fileReader","FileReader","onload","pixels","result","err","message","readAsDataURL","type","ErrorHandler","action","Button_Button","size","handler","Snackbar","anchorOrigin","vertical","horizontal","onClose","ContentProps","aria-describedby","errorMsg","LoadImageAction","error","handleError","msg","closeError","e","loader","Loader","load","inputElem","current","add","openFileDialog","click","React","createRef","error_ErrorHandler","SaveImageAction","handleFormChange","saveFile","numberOfImages","getCanvas","toBlob","blob","saveAs","getSelectedImage","extensions","Extensions","formats","Divider","extension","button","LookUpTable","operation","fillTable","values","appendValue","perform","getValue","level","inputIsValid","BlackAndWhite","applyOperation","isAnyImageSelected","operationHasBeenApplied","blackAndWhite","BlackAndWhiteOperation","lut","applyPointOperation","aria-label","Add_default","ClampedLinealFunction","p1","p2","get","setEquationComponents","FUNCTION_MIN","FUNCTION_MAX","LinealPicewiseAdjustment","insert","point","valueIsValid","points","insertionIndex","getIntervalIndex","splice","setFunctions","functionIndex","functions","clampValue","firstPoint","secondPoint","LinealFunction","MAX_POINTS","linealPicewiseOperation","maxPointsReached","onChipDelete","console","log","updateState","linealPicewiseOperator","onInsertionValueChanged","addPoint","_this$state","Number","parseFloat","LinealPicewiseAdjustmentOperation","Theme","Chip_default","TextField_default","InputLabelProps","shrink","mini","disabled","BrightnessAndContrast","oldMean","oldStdVar","newMean","newStdVar","setOldMean","setOldStdVar","setNewMean","setNewStdVar","styles","alignItems","alignContent","slider","thumb","brightnessValue","contrastValue","brightnessAndContrast","onBrightnessSliderChange","onBrightnessTextFieldChange","onContrastSliderChange","onContrastTextFieldChange","BrightnessAndContrastOperation","getMean","getStdVar","_this$state2","Slider_default","container","track","min","max","aria-labelledby","textField","HistogramEqualization","getAccumulativeCount","k","equalization","HistogramEqualizationOperation","HistogramSpecification","toTransformHistogram","referenceHistogram","originalValue","getAccumulativeProbability","outputLevel","referenceHistogramTitle","selectedHistogram","histogramSpecificationOperation","HistogramSpecificationOperation","imageName","histogramIndex","getImageIndex","histograms","imageTitles","getImageTitles","flexDirection","inputProps","Button_Button_default","GammaCorrection","gamma","setGamma","GAMMA_MIN","GAMMA_MAX","pow","MIN_GAMMA","GammaCorrectionOperation","MAX_GAMMA","inverted","getGammaValue","getGammaData","invertedChecked","onGammaChange","onGammaTextChange","Slider_Slider_default","TextField_TextField_default","ImageDifference","image1","image2","imagesHaveTheSameSize","resultImage","j","color1","color2","abs","imageTitle","referenceImage","ImageDifferenceOperation","selectedImage","imageIndex","images","FormControl_FormControl_default","InputLabel_InputLabel_default","Select_Select_default","MenuItem_MenuItem_default","ChangesDetection","threshold","MIN_THRESHOLD","MAX_THRESHOLD","ChangesDetectionOperation","onThresholdChange","onThresholdTextChange","CrossImageGraph","right","bottom","stackBy","hideLine","ImageCrossSelection","radius","startPixel","endPixel","crossSelection","derivativeCrossSelection","setRadius","isAValidRadius","setReferenceImage","setCrossSelection","pixelIsInRange","crossSelectionPixels","Bresenham","pixel","pixelColor","derivativeColor","getDerivativeColor","addData","getFormattedCrossSelection","getFormattedDerivativeSelection","sumColor","numberOfNeighbours","getNormalizedColor","currentPixel","nextPixel","currentColor","list","formattedData","pointCount","MIN_RADIUS","MAX_RADIUS","CrossImageSelection","crossImageSelection","derivative","beginPoint","endPoint","getSectionOperation","displaySectionLine","CrossImageSelectionOperation","getData","currentImage","parseInt","newPoint","pointIsValid","onSwitchChecked","fillCircle","ctx","arc","PI","fillStyle","fill","updateImageCanvas","getContext","beginPath","moveTo","lineTo","lineWidth","strokeStyle","stroke","onRadiusChanged","onRadiusTextChange","FormControlLabel_FormControlLabel_default","Switch_Switch_default","cross_image_CrossImageGraph","step","ImageQuantizer","quantizeImage","bits","numberOfLevels","col","newScaleColor","originalScaleColor","floor","ImageResampler","MAX_VALUE","MIN_VALUE","resample","cols","prevValues","rgbcolor","meansColors","ImageQuantization","quantizationLevel","resampleRows","resampleCols","updateImageHistogram","updateMethod","onQuantizationLevelChange","onQuantizationLevelTextChange","log2","onResampleSizeChange","InputProps","endAdornment","InputAdornment_default","VerticalTransformProcessor","applyGeometricChange","originalImage","rgbaComponent","HorizontalTransformProcessor","ImageFlipper","flipType","VerticalProcessor","HorizontalProcessor","TransposedProcessor","newImageData","from","TransposedImage","Scaling","horizontalFactor","verticalFactor","interpolator","newWidth","newHeight","interpolatedColor","interpolateColor","setVerticalFactorFromWidth","oldWidth","setVerticalFactor","setHoorizontalFactorFromHeight","oldHeight","setHorizontalFactor","setFactor","factor","factorIsValid","FACTOR_MIN","FACTOR_MAX","Interpolator","getNeighbourhood","X","Y","A","getNeighbour","B","C","D","isInBounds","OVER_LIMITS_COLOR","NearestNeighbourInterpolator","nearestNeighbourKey","bound","getPositionBound","neighbourhood","keys","neighbour","BilinealInterpolator","p","q","P","clampResult","interpolators","nearestNeighbour","bilineal","interpolatorsText","xFactor","ScalingOperation","yFactor","selectedInterpolator","getSelectedInterpolator","getFactor","resetActionMethod","onFactorChanged","onFactorTextChanged","onInterpolatorSelected","autoWidth","interpolatorName","ImageRotation","degrees","times","newImage","RotateImage","rotationDegrees","Rotation","createNewImageState","angle","getNewImageWidthAndHeight","getImageCorners","topLeft","topRight","bottomLeft","bottomRight","getRotatedImageCorners","corners","rotatedCorners","getRotationPosition","minMax","getMinMaxCorners","xCoordinates","yCoordinates","apply","radAngle","cos","sin","getDirectPosition","_this$getRotationPosi","getInversePosition","minX","minY","clampIndexes","MIN_ANGLE","MAX_ANGLE","RawRotation","InterpolatedRotation","positionIsValid","MIDDLE_ANGLE","RotationOperation","rotationMethods","raw","interpolated","selectedRotationMethod","getRotationMethod","getInterpolator","onAngleChanged","onAngleTextChanged","angleIsValid","onRotationMethodSelected","interpolatorSelectorDisabled","getHeader","rotationMethod","Typography_Typography_default","actionPicker","load_img","actions_LoadImageAction","save_img","actions_SaveImageAction","black_white","point_lineal_BlackAndWhite","lineal_adjustment","point_lineal_LinealPicewiseAdjustment","brightness_contrast","point_lineal_BrightnessAndContrast","histogram_equalization","point_non_lineal_HistogramEqualization","histogram_specification","point_non_lineal_HistogramSpecification","gamma_correction","point_non_lineal_GammaCorrection","image_difference","point_non_lineal_ImageDifference","changes_detection","point_non_lineal_ChangesDetection","cross_image","cross_image_CrossImageSelection","image_flipper","geometric_ImageFlipper","image_transpose","geometric_TransposedImage","scale_image","actions_geometric_Scaling","rotate_image","geometric_RotateImage","rotation","geometric_Rotation","image_quantization","non_lineal_ImageQuantization","Action","currentAction","ActionPicker","currentActionName","renderAction","TITLE_MAX_LENGHT","ImageTabs","updateSelectedImage","delete","stopPropagation","reduceTittle","getSelectedImageIndex","scrollable","scrollButtons","IconButton_default","marginRight","Clear_default","flexGrow","containerStyles","WorkspaceBar","calculateColor","_this$props$position","calculateColorText","_this$props$position2","calculatePosition","_this$props$position3","duplicateActualImage","updateImageState","avatar","Avatar_default","borderRight","Icon_default","workspaceStyle","canvasContainerStyle","overflow","regionStyle","ImageWorkspace","regions","canvasMovement","nativeEvent","offsetX","offsetY","mouseLeaved","setCropState","cropEnabled","handleCrop","originalImageData","fromX","fromY","toX","toY","handleKeyPress","canvasRef","regionRenderer","bind","assertThisInitialized","updateRegions","keyController","setCanvas","regionProps","isChanging","showCropper","image_workspace_ImageTabs","RegionSelect_default","maxRegions","constraint","onMouseMove","onMouseLeave","image_workspace_WorkspaceBar","aStyle","textDecoration","footer","Fragment","Histogram","count","mean","stdVar","entropy","setCount","setAccumulativeCount","setMean","setStdVar","setMinMax","setEntropy","getCount","getProbability","getMax","getMin","getEntropy","getImageWidth","getImageHeight","getFormattedCount","formatData","getFormattedAccumulativeCount","array","initializeObject","obj","components","Array","prevValue","actualValue","sqrt","ImageController","canvas","imageToDisplay","putImageData","clearRect","titles","table","imageColor","tableColor","App","onKeyPressed","keyAction","updateController","updateCurrentAction","getCurrentActionName","actionName","MenuData","some","updateKeyController","gridContainerClass","esm","keyEventName","KEYDOWN","keyValue","onKeyHandle","gridItemClass","menu_MainMenu","image_workspace_ImageWorkspace","info_Info","actions_Action","layout_footer","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.ba83883f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport MenuList from '@material-ui/core/MenuList';\r\n\r\nclass MainMenuItem extends Component {\r\n  state = {\r\n    anchorEl: null,\r\n    open: false,\r\n  };\r\n\r\n  handleToggle = () => {\r\n    this.setState(state => ({ open: !state.open }));\r\n  };\r\n\r\n  handleClose = event => {\r\n    if (this.anchorEl.contains(event.target)) {\r\n      return;\r\n    }\r\n    this.setState({ open: false });\r\n    let optionId = event.target.id;\r\n    this.props.updateAction(optionId);\r\n  };\r\n\r\n  handleOutClose = () => {\r\n    this.setState({ open: false });\r\n  }\r\n\r\n  render() {\r\n    const { options, title } = this.props;\r\n    const { open } = this.state;\r\n\r\n    return (\r\n        <div>\r\n          <Button\r\n              buttonRef={node => {\r\n                this.anchorEl = node;\r\n              }}\r\n              aria-owns={open ? 'menu-list-grow' : undefined}\r\n              aria-haspopup=\"true\"\r\n              onClick={this.handleToggle}>\r\n            {title}\r\n          </Button>\r\n          <Popper open={open} anchorEl={this.anchorEl} transition disablePortal>\r\n            {({ TransitionProps, placement }) => (\r\n                <Grow\r\n                    {...TransitionProps}\r\n                    id=\"menu-list-grow\"\r\n                    style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}>\r\n                  <Paper>\r\n                    <ClickAwayListener onClickAway={this.handleOutClose}>\r\n                      <MenuList>\r\n                        {\r\n                          options.map(option => (\r\n                              <MenuItem\r\n                                  key={option.id}\r\n                                  id={option.id}\r\n                                  onClick={this.handleClose}>\r\n                                {option.name}\r\n                              </MenuItem>\r\n                          ))\r\n                        }\r\n                      </MenuList>\r\n                    </ClickAwayListener>\r\n                  </Paper>\r\n                </Grow>\r\n            )}\r\n          </Popper>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainMenuItem;\r\n","import React, { Component } from \"react\";\r\nimport './logo.css'\r\n\r\nclass Logo extends Component {\r\n  render() {\r\n    return(\r\n        <div className=\"title\">\r\n          <a href=\"https://github.com/CristianAbrante/ReactVision\">\r\n            <span className=\"first\">react</span>\r\n            <span className=\"second\">vision</span>\r\n          </a>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Logo;","import React, { Component } from \"react\";\r\nimport MainMenuItem from \"./MainMenuItem\";\r\nimport Logo from \"../logo/Logo\"\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\n\r\nclass MainMenu extends Component {\r\n  render() {\r\n    const items = this.props.items;\r\n    return(\r\n        <Paper>\r\n          <Toolbar>\r\n            <Logo/>\r\n            {items.map(item => (\r\n                <MainMenuItem\r\n                    key={item.title}\r\n                    title={item.title}\r\n                    options={item.options}\r\n                    updateAction={this.props.updateAction}/>\r\n            ))}\r\n          </Toolbar>\r\n        </Paper>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MainMenu;\r\n","import React, {Component} from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Select from '@material-ui/core/Select';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing.unit,\r\n    minWidth: 120,\r\n    maxWidth: 300,\r\n  },\r\n  chips: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  chip: {\r\n    margin: theme.spacing.unit / 4,\r\n  },\r\n  noLabel: {\r\n    marginTop: theme.spacing.unit * 3,\r\n  },\r\n});\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nconst colors = [\r\n  'Red',\r\n  'Green',\r\n  'Blue',\r\n];\r\n\r\n\r\nclass HistogramInfo extends Component {\r\n  state = {\r\n    color: [],\r\n    labelWidth: 0\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({ color: event.target.value });\r\n    let difference = colors.filter(x => !event.target.value.includes(x));\r\n    this.props.onColorOptions(event.target.value, difference);\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      labelWidth: ReactDOM.findDOMNode(this.InputLabelRef).offsetWidth,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {accumulative, red, green, blue, disableColors} = this.props.options;\r\n    const { classes } = this.props;\r\n\r\n    return(\r\n      <div className=\"histogram-options\">\r\n        <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                      checked={disableColors}\r\n                      value=\"Brightness\"\r\n                      onChange ={this.props.onBrightnessOption}/>\r\n                }\r\n                label=\"Brightness\"/>\r\n          <FormControl variant=\"outlined\" className={classes.formControl}>\r\n          <InputLabel\r\n            ref={ref => {\r\n              this.InputLabelRef = ref;\r\n            }}\r\n            htmlFor=\"members\"\r\n          >\r\n            Channels\r\n          </InputLabel>\r\n            <Select\r\n              multiple\r\n              value={this.state.color}\r\n              onChange={this.handleChange}\r\n              input={\r\n                <OutlinedInput\r\n                  labelWidth={this.state.labelWidth}\r\n                  name=\"channel\"\r\n                  id=\"outlined-select-multiple-checkbox\"\r\n                />\r\n              }\r\n              renderValue={selected => selected.join(' + ')}\r\n              MenuProps={MenuProps}\r\n              variant=\"outlined\"\r\n            >\r\n              {colors.map(color => (\r\n                <MenuItem key={color} value={color}>\r\n                  <Checkbox checked={this.state.color.indexOf(color) > -1} />\r\n                  <ListItemText primary={color} />\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nHistogramInfo.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(HistogramInfo);\r\n","import React, {Component} from 'react';\r\nimport {\r\n  AreaSeries,\r\n  XYPlot,\r\n  FlexibleXYPlot,\r\n  makeWidthFlexible,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalGridLines,\r\n  HorizontalGridLines,\r\n} from 'react-vis';\r\n\r\nconst colors = {\r\n  r: \"#d32f2f\",\r\n  g: \"#43a047\",\r\n  b: \"#1976d2\",\r\n  brightness: \"#bdbdbd\"\r\n};\r\n\r\nclass HistogramGraph extends Component {\r\n  state = {\r\n    emphasizedValue: null,\r\n    histogramVisualizationData: []\r\n  };\r\n\r\n\r\n  getSeries = component => {\r\n    let accumulative = this.props.accumulative;\r\n    let histogram = this.props.currentHistogram;\r\n    if (component === 'brightness') {\r\n      if (!this.props.brightness)\r\n        return null;\r\n\r\n      let data = histogram.getFormattedData(component, accumulative);\r\n      return this.getDataSeries(data, colors[component]);\r\n    } else {\r\n      if (this.props.brightness)\r\n        return null;\r\n      if (this.props[component]) {\r\n        let data = histogram.getFormattedData(component, accumulative);\r\n        return this.getDataSeries(data, colors[component]);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  };\r\n\r\n  getDataSeries = (data, color) => {\r\n    return(\r\n        <AreaSeries\r\n            curve=\"curve-natural\"\r\n            color={color}\r\n            opacity=\"0.2\"\r\n            data={data} />\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n        height: \"180px\"\r\n      }}\r\n    >\r\n          <FlexibleXYPlot margin={{\r\n          top: 10,\r\n          left: 70\r\n        }}>\r\n            <VerticalGridLines />\r\n            <HorizontalGridLines />\r\n            <XAxis />\r\n            <YAxis />\r\n            {this.getSeries('r')}\r\n            {this.getSeries('g')}\r\n            {this.getSeries('b')}\r\n            {this.getSeries('brightness')}\r\n          </FlexibleXYPlot>\r\n          </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HistogramGraph;\r\n","import React, {Component} from 'react';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    flexWrap: 'wrap',\r\n  },\r\n  chip: {\r\n    margin: theme.spacing.unit / 4,\r\n  },\r\n});\r\n\r\n\r\nclass ImageInfo extends Component {\r\n  state = {\r\n    rows: [\r\n        { variable: \"Number of pixel\", value: \"-\"},\r\n        { variable: \"Image width\", value: \"-\"},\r\n        { variable: \"Image height\", value: \"-\"},\r\n        { variable: \"Brightness\", value: \"-\"},\r\n        { variable: \"Contrast\", value: \"-\"},\r\n        { variable: \"Entropy\", value: \"-\"},\r\n        { variable: \"Min value\", value: \"-\"},\r\n        { variable: \"Max value\", value: \"-\"}\r\n    ],\r\n  };\r\n\r\n  getImageProperty = property => {\r\n    let histogram = this.props.histogram;\r\n\r\n    return histogram.getImage()[property]();\r\n  };\r\n\r\n  getHistogramProperty = property => {\r\n    let histogram = this.props.histogram;\r\n\r\n    let value = histogram[property]().brightness;\r\n    return value % 1 === 0 ? value : value.toFixed(3);\r\n  };\r\n\r\n  shouldComponentUpdate(nextProps) {\r\n    let histogram = this.props.histogram;\r\n\r\n    if(histogram === undefined || nextProps.histogram === undefined){\r\n      this.state.rows = [{ variable: \"Number of pixel\", value: \"-\"},\r\n      { variable: \"Image width\", value: \"-\"},\r\n      { variable: \"Image height\", value: \"-\"},\r\n      { variable: \"Brightness\", value: \"-\"},\r\n      { variable: \"Contrast\", value: \"-\"},\r\n      { variable: \"Entropy\", value: \"-\"},\r\n      { variable: \"Min value\", value: \"-\"},\r\n      { variable: \"Max value\", value: \"-\"}]\r\n      return true;\r\n    }\r\n\r\n    this.state.rows = [\r\n    { variable: \"Number of pixel\", value: this.getImageProperty(\"getNumberOfPixels\")},\r\n    { variable: \"Image width\", value: this.getImageProperty(\"getWidth\")},\r\n    { variable: \"Image height\", value: this.getImageProperty(\"getHeight\")},\r\n    { variable: \"Brightness\", value: this.getHistogramProperty(\"getMean\")},\r\n    { variable: \"Contrast\", value: this.getHistogramProperty(\"getStdVar\")},\r\n    { variable: \"Entropy\", value: this.getHistogramProperty(\"getEntropy\")},\r\n    { variable: \"Min value\", value: this.getHistogramProperty(\"getMin\")},\r\n    { variable: \"Max value\", value: this.getHistogramProperty(\"getMax\")}\r\n  ];\r\n    return true;\r\n  }\r\n\r\n  render () {\r\n    const {classes} = this.props;\r\n    const {rows} = this.state;\r\n\r\n    return (\r\n      <div className=\"column\" id=\"info\">\r\n          <div className=\"column left\">\r\n          <Table padding=\"dense\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Variable</TableCell>\r\n              <TableCell align=\"right\">Value</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.slice(0, rows.length/2).map((row, id) => (\r\n              <TableRow key={id}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.variable}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{row.value}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n        </div>\r\n\r\n        <div className=\"column right\">\r\n        <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Variable</TableCell>\r\n            <TableCell align=\"right\">Value</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.slice((rows.length/2), rows.length).map((row, id) => (\r\n            <TableRow key={id}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.variable}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.value}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n        </Table>\r\n        </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(ImageInfo);\r\n","import React, { Component } from \"react\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nclass Window extends Component {\r\n  static windowCount = 0;\r\n\r\n  state = {\r\n    isClosed: false,\r\n  };\r\n\r\n  constructor(props){\r\n    super(props);\r\n    Window.windowCount++;\r\n  }\r\n\r\n  handleCloseEvent = (event) => {\r\n    this.setState({isClosed: true});\r\n  }\r\n /*\r\n <Paper className=\"grid-item\">\r\n   <div className=\"windows-bar\">\r\n     <div className=\"header\" style={{ flex: 1, marginLeft: \"24px\" }}>\r\n       {options.title}\r\n     </div>\r\n     <IconButton style={{padding: \"1px\"}}color=\"secondary\" onClick={e => this.handleCloseEvent(e)}>\r\n       <Clear />\r\n     </IconButton>\r\n   </div>\r\n   <div className=\"windows-content\">\r\n   {options.children}\r\n   </div>\r\n </Paper>\r\n */\r\n  render() {\r\n    const options = this.props;\r\n    return(\r\n      <Paper className=\"grid-item\">\r\n        <div className=\"windows-bar\">\r\n          <div className=\"header\" style={{ flex: 1, marginLeft: \"24px\" }}>\r\n            {options.title}\r\n          </div>\r\n        </div>\r\n        <div className=\"windows-content\">\r\n        {options.children}\r\n        </div>\r\n      </Paper>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Window;\r\n","import {createMuiTheme} from '@material-ui/core/styles/index';\r\n\r\nconst theme = createMuiTheme(\r\n    {\r\n      palette: {\r\n        primary: {\r\n          light: \"#ffffff\",\r\n          main: \"#eceff1\",\r\n          dark: \"#babdbe\",\r\n          contrastText: \"#000000\",\r\n        },\r\n        secondary: {\r\n          light: \"#f05545\",\r\n          main: \"#b71c1c\",\r\n          dark: \"#7f0000\",\r\n          contrastText: \"#ffffff\",\r\n        }\r\n      },\r\n      typography: {\r\n        useNextVariants: true,\r\n      }\r\n    }\r\n);\r\n\r\nexport default theme;","import React, {Component} from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport HistogramInfo from './histogram/HistogramInfo';\r\nimport Histogram from './histogram/Histogram';\r\nimport ImageInfo from './histogram/ImageInfo';\r\nimport Window from '../windows/Window';\r\nimport theme from '../../theme/';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport NoSsr from '@material-ui/core/NoSsr';\r\n\r\nconst containerStyle = {\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  height: \"100%\",\r\n  alignContent: \"stretch\"\r\n};\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    width: 500,\r\n  },\r\n});\r\n\r\nfunction TabContainer({ children, dir }) {\r\n  return (\r\n    <Typography component=\"div\" dir={dir} style={{ padding: \"7px 15px\" }}>\r\n      {children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nTabContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  dir: PropTypes.string.isRequired,\r\n};\r\n\r\nclass Info extends Component {\r\n  state = {\r\n    accumulative: false,\r\n    red: false,\r\n    green: false,\r\n    blue: false,\r\n    disableColors: true,\r\n    value: 0\r\n  };\r\n\r\n  handleChange = (event, value) => {\r\n    this.setState({ value });\r\n\r\n    if(value === 1)\r\n      this.setState({ accumulative: true });\r\n    else\r\n      this.setState({ accumulative: false });\r\n  };\r\n\r\n  renderHistogram = () => {\r\n    let histogram = this.props.controller.getCurrentHistogram();\r\n    if (histogram === undefined) {\r\n      return (\r\n          <div className=\"empty-histogram\">\r\n          <Typography component=\"span\">\r\n            Histogram\r\n          </Typography>\r\n          </div>\r\n      )\r\n    } else {\r\n      return (\r\n            <Histogram\r\n                accumulative = {this.state.accumulative}\r\n                brightness = {this.state.disableColors}\r\n                r = {this.state.red}\r\n                g = {this.state.green}\r\n                b = {this.state.blue}\r\n                currentHistogram={histogram} />\r\n        );\r\n    }\r\n  };\r\n\r\n  handleBrightnessVisualization = () => {\r\n    this.setState({disableColors: !this.state.disableColors,\r\n                    red: false, blue: false, green: false});\r\n  };\r\n\r\n  handleHistogramVisualization = () => {\r\n    this.setState({accumulative: !this.state.accumulative});\r\n  };\r\n\r\n  handleColorsVisualization = (colorOn, colorOff) => {\r\n    if(colorOn.length > 0) {\r\n      this.setState({disableColors: false});\r\n    } else {\r\n      this.setState({disableColors: true});\r\n    }\r\n\r\n    colorOn.forEach(color => {\r\n      this.setState({[color.toLowerCase()]: true});\r\n    });\r\n\r\n    colorOff.forEach(color => {\r\n      this.setState({[color.toLowerCase()]: false});\r\n    })\r\n\r\n  };\r\n\r\n  render() {\r\n    let histogram = this.props.controller.getCurrentHistogram();\r\n    const { value } = this.state;\r\n\r\n    return(\r\n        <Window title=\"Image info\">\r\n            <AppBar id=\"info-tabs\" position=\"static\" color=\"default\">\r\n            <Tabs\r\n              value={this.state.value}\r\n              onChange={this.handleChange}\r\n              variant=\"fullWidth\"\r\n              centered\r\n            >\r\n              <Tab label=\"Histogram\" />\r\n              <Tab label=\"Accumulative histogram\" />\r\n            </Tabs>\r\n          </AppBar>\r\n\r\n            {(value === 0 || value === 1) && <TabContainer dir={theme.direction}>\r\n                {<div className=\"windows histogram\">\r\n                <HistogramInfo\r\n                    options={this.state}\r\n                    onHistogramOption={this.handleHistogramVisualization}\r\n                    onColorOptions={this.handleColorsVisualization}\r\n                    onBrightnessOption={this.handleBrightnessVisualization}/>\r\n                  {this.renderHistogram()}\r\n                  <ImageInfo histogram={histogram}/>\r\n                  </div>}\r\n            </TabContainer>}\r\n       </Window>\r\n    )\r\n  }\r\n}\r\n\r\nInfo.propTypes = {\r\n  theme: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Info);\r\n","/**\r\n * Process image class represents\r\n * an image fully editable. It contains\r\n * the pixel values for each position\r\n * of the image.\r\n *\r\n * Uses R,G,B,A representation\r\n * of each pixel.\r\n */\r\nclass ProcessImage {\r\n  static MIN_PIXEL_VALUE = 0;\r\n  static MAX_PIXEL_VALUE = 256;\r\n  static colorComponent = {\r\n    r: 0,\r\n    g: 1,\r\n    b: 2,\r\n    a: 3,\r\n  };\r\n\r\n  title;\r\n  format;\r\n  width;\r\n  height;\r\n\r\n  dataHistory;\r\n  dataHistoryIndex;\r\n\r\n  /**\r\n   * Constructor of the class\r\n   * takes the title, data and\r\n   * width and height of the\r\n   * image.\r\n   *\r\n   * @param title of the image containing format.\r\n   * @param data of the pixels.\r\n   * @param width of the image.\r\n   * @param height of the image.\r\n   */\r\n  constructor(title, width, height, data) {\r\n    this.title = title.replace(/\\..+/i, \"\");\r\n    this.format = title.split('.').pop();\r\n    this.dataHistory = [];\r\n    this.dataHistorySizes = [];\r\n    this.dataHistoryIndex = 0;\r\n    if (data === undefined) {\r\n      this.createNewBlankState();\r\n    } else {\r\n      this.setNewState(data, width, height);\r\n    }\r\n  }\r\n\r\n  getTitle = () => {\r\n    return this.title;\r\n  };\r\n\r\n  getFormat = () => {\r\n    return this.format;\r\n  };\r\n\r\n  getNumberOfStates = () => {\r\n    return this.dataHistory.length;\r\n  };\r\n\r\n  isAnyState = () => {\r\n    return this.getNumberOfStates() !== 0;\r\n  };\r\n\r\n  createNewState = () => {\r\n    if (this.isAnyState()) {\r\n      let data = this.getCurrentStateData().slice();\r\n      this.setNewState(data, this.getWidth(), this.getHeight());\r\n    }\r\n  };\r\n\r\n  createNewBlankState = (width, height) => {\r\n    let data = [];\r\n    let arrayLength = width * height * 4;\r\n    for (let i = 0; i < arrayLength; i++) {\r\n      data.push(0);\r\n    }\r\n    this.setNewState(data, width, height);\r\n  };\r\n\r\n  setNewState = (data, width, height) => {\r\n    let newState = {\r\n      width: width,\r\n      height: height,\r\n      data: data,\r\n    };\r\n    while (this.isAnyState() && this.dataHistoryIndex !== this.getNumberOfStates() - 1) {\r\n      this.dataHistory.pop();\r\n    }\r\n    this.dataHistory.push(newState);\r\n  };\r\n\r\n  setInitialState = () => {\r\n    this.dataHistoryIndex = 0;\r\n  };\r\n\r\n  setPreviousState = () => {\r\n    if (this.dataHistoryIndex !== 0) {\r\n      this.dataHistoryIndex -= 1;\r\n    }\r\n  };\r\n\r\n  setNextState = () => {\r\n    if (this.dataHistoryIndex !== this.getNumberOfStates() - 1) {\r\n      this.dataHistoryIndex += 1;\r\n    }\r\n  };\r\n\r\n  getImageData = () => {\r\n    return new ImageData(\r\n        new Uint8ClampedArray(this.getCurrentStateData()),\r\n        this.getWidth(),\r\n        this.getHeight()\r\n    );\r\n  };\r\n\r\n  getCurrentState = () => {\r\n    return this.dataHistory[this.dataHistoryIndex];\r\n  };\r\n\r\n  getCurrentStateData = () => {\r\n    return this.getCurrentState().data;\r\n  };\r\n\r\n  getWidth = () => {\r\n    return this.getCurrentState().width;\r\n  };\r\n\r\n  getHeight = () => {\r\n    return this.getCurrentState().height;\r\n  };\r\n\r\n  getNumberOfPixels = () => {\r\n    return this.getWidth() * this.getHeight();\r\n  };\r\n\r\n  /**\r\n   * Return true if a pair of indexes\r\n   * are in the range of the image.\r\n   *\r\n   * @param x horizontal index.\r\n   * @param y vertical index.\r\n   * @returns {boolean} true if indexes\r\n   *          are in range and false otherwise.\r\n   */\r\n  indexesAreInRange = (x, y) => {\r\n    return (x >= 0 && x < this.getWidth())\r\n        && (y >= 0 && y < this.getHeight());\r\n  };\r\n\r\n  /**\r\n   * Return true if color value\r\n   * is in the range [Min, Max]-\r\n   *\r\n   * In most cases this range\r\n   * corresponds to [0, 255].\r\n   *\r\n   * @param color\r\n   * @returns {boolean}\r\n   */\r\n  static colorIsInRange = (color) => {\r\n    return (color >= ProcessImage.MIN_PIXEL_VALUE)\r\n        && (color < ProcessImage.MAX_PIXEL_VALUE);\r\n  };\r\n\r\n  /**\r\n   * Returns the color index in\r\n   * the data array.\r\n   *\r\n   * @param x column of the pixel\r\n   * @param y row of the pixel.\r\n   * @returns {*} start index of the pixel.\r\n   */\r\n  getColorIndex = (x, y) => {\r\n    if (this.indexesAreInRange(x, y)) {\r\n      return y * (this.getWidth() * 4) + x * 4;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Return the component situated\r\n   * at a specified position of the\r\n   * array.\r\n   *\r\n   * @param position\r\n   * @returns {*}\r\n   */\r\n  getComponent = position => {\r\n    return this.getCurrentStateData()[position];\r\n  };\r\n\r\n  /**\r\n   * Sets the data situated at\r\n   * a specified position.\r\n   *\r\n   * @param position to set the color.\r\n   * @param color that we want to set.\r\n   */\r\n  setComponent = (position, color) => {\r\n    this.getCurrentStateData()[position] = color;\r\n  };\r\n\r\n  /**\r\n   * Returns the color corresponding\r\n   * to the component.\r\n   *\r\n   * @param x column of the color\r\n   * @param y row of the column.\r\n   * @param component r,g,b,a string.\r\n   * @returns {*} color component.\r\n   */\r\n  getColor = (x, y, component) => {\r\n    if (component === 'brightness')\r\n      return this.getBrightness(x, y);\r\n\r\n    const numericComponent = ProcessImage.colorComponent[component];\r\n    if (numericComponent === undefined)\r\n      throw new Error('unknown component: ' + component);\r\n\r\n    const index = this.getColorIndex(x, y);\r\n    if (index === undefined)\r\n      throw new Error('(' + x + ', ' + y + ') are not in range.');\r\n\r\n    return this.getComponent(index + numericComponent);\r\n  };\r\n\r\n  /**\r\n   * Set the color of the component.\r\n   *\r\n   * @param x\r\n   * @param y\r\n   * @param component\r\n   * @param color\r\n   */\r\n  setColor = (x, y, component, color) => {\r\n    if (component === 'brightness') {\r\n      this.setBrightness(x, y, color);\r\n      return;\r\n    }\r\n\r\n    if (!ProcessImage.colorIsInRange(color))\r\n      throw new Error('color is not in range: ' + color);\r\n\r\n    const numericComponent = ProcessImage.colorComponent[component];\r\n    if (numericComponent === undefined)\r\n      throw new Error('unknown component: ' + component);\r\n\r\n    const index = this.getColorIndex(x, y);\r\n    if (index === undefined)\r\n      throw new Error('(' + x + ', ' + y + ') are not in range.');\r\n\r\n    this.setComponent(index + numericComponent, color);\r\n  };\r\n\r\n  getRedComponent = (x, y) => {\r\n    return this.getColor(x, y, 'r');\r\n  };\r\n\r\n  setRedComponent = (x, y, red) => {\r\n    this.setColor(x, y, 'r', red);\r\n  };\r\n\r\n  getGreenComponent = (x, y) => {\r\n    return this.getColor(x, y, 'g');\r\n  };\r\n\r\n  setGreenComponent = (x, y, green) => {\r\n    this.setColor(x, y, 'g', green);\r\n  };\r\n\r\n  getBlueComponent = (x, y) => {\r\n    return this.getColor(x, y, 'b');\r\n  };\r\n\r\n  setBlueComponent = (x, y, blue) => {\r\n    this.setColor(x, y, 'b', blue);\r\n  };\r\n\r\n  getAlphaComponent = (x, y) => {\r\n    return this.getColor(x, y, 'a');\r\n  };\r\n\r\n  setAlphaComponent = (x, y, alpha) => {\r\n    this.setColor(x, y, 'a', alpha);\r\n  };\r\n\r\n  /**\r\n   * Performs PAL conversion\r\n   * of the components to calculate\r\n   * brightness.\r\n   *\r\n   * @param x column of the pixel.\r\n   * @param y row of the pixel.\r\n   * @returns {number}\r\n   */\r\n  getBrightness = (x, y) => {\r\n    const rgb = this.getRGBComponents(x, y);\r\n    return Math.round(0.222 * rgb.r + 0.707 * rgb.g + 0.071 * rgb.b);\r\n  };\r\n\r\n  /**\r\n   * Converts the specified position\r\n   * into a greyscale brightness value.\r\n   *\r\n   * @param x column of the conversion.\r\n   * @param y row of the conversion.\r\n   * @param brightness\r\n   */\r\n  setBrightness = (x, y, brightness) => {\r\n    this.setRGBComponents(x, y, brightness, brightness, brightness);\r\n  };\r\n\r\n  /**\r\n   * getter for the 3 components of a pixel.\r\n   *\r\n   * @param x column of the pixel.\r\n   * @param y row of the pixel.\r\n   * @returns {{r: *, g: *, b: *}}\r\n   *          object with configuration.\r\n   */\r\n  getRGBComponents = (x, y) => {\r\n    return {\r\n      r: this.getRedComponent(x, y),\r\n      g: this.getGreenComponent(x, y),\r\n      b: this.getBlueComponent(x, y)\r\n    };\r\n  };\r\n\r\n  setRGBComponents = (x, y, red, green, blue) => {\r\n    this.setRedComponent(x, y, red);\r\n    this.setGreenComponent(x, y, green);\r\n    this.setBlueComponent(x, y, blue);\r\n  };\r\n\r\n  /**\r\n   * Getter for the four components of\r\n   * a pixel.\r\n   *\r\n   * @param x column of the pixel.\r\n   * @param y row of the pixel.\r\n   * @returns {{r: *, g: *, b: *, a: *}}\r\n   * object with configuration.\r\n   */\r\n  getRGBAComponents = (x, y) => {\r\n    const rgb = this.getRGBComponents(x, y);\r\n    return {\r\n      r: rgb.r,\r\n      g: rgb.g,\r\n      b: rgb.b,\r\n      a: this.getAlphaComponent(x, y)\r\n    };\r\n  };\r\n\r\n  setRGBAComponets = (x, y, red, green, blue, alpha) => {\r\n    this.setRGBComponents(x, y, red, green, blue);\r\n    this.setAlphaComponent(x, y, alpha);\r\n  };\r\n}\r\n\r\nexport default ProcessImage;\r\n","import ProcessImage from '../image/ProcessImage'\r\nimport pixels from 'get-pixels';\r\n\r\nclass ImageFileLoader {\r\n  fileName;\r\n  image;\r\n  imageData;\r\n\r\n  getReadFile = () => {\r\n    return this.image;\r\n  };\r\n\r\n  getImageData() {\r\n    return this.imageData;\r\n  }\r\n\r\n  setImage = data => {\r\n    let shape = data.shape;\r\n    // test if it is a GIF image.\r\n    let width = shape.length === 3 ? shape[0] : shape[1];\r\n    let height = shape.length === 3 ? shape[1] : shape[2];\r\n    this.image = new ProcessImage(this.fileName, width, height, data.data, );\r\n  };\r\n\r\n  load(inputNode, callback) {\r\n    if (!inputNode.files) {\r\n      throw new Error(\"browser do not support image loading\");\r\n    } else {\r\n      let file = inputNode.files[0];\r\n      this.fileName = file.name;\r\n      if (!ImageFileLoader.isAnImage(file))\r\n        throw new Error('should load a valid image file.');\r\n\r\n      let fileReader = new FileReader();\r\n      fileReader.onload = () => {\r\n        pixels(fileReader.result, (err, pixels) => {\r\n          if (err) {\r\n            throw new Error(err.message);\r\n          }\r\n          this.setImage(pixels);\r\n          callback();\r\n        });\r\n      };\r\n      fileReader.readAsDataURL(file);\r\n    }\r\n  }\r\n\r\n  static isAnImage(file) {\r\n    return file.type.includes('image');\r\n  }\r\n}\r\n\r\nexport default ImageFileLoader;","import React, {Component} from 'react';\r\nimport Snackbar from '@material-ui/core/es/Snackbar/Snackbar';\r\nimport Button from '@material-ui/core/es/Button/Button';\r\n\r\nclass ErrorHandler extends Component {\r\n  action = (\r\n      <Button\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n          onClick={this.props.handler}>\r\n        close\r\n      </Button>\r\n  );\r\n\r\n  render() {\r\n    return(\r\n        <Snackbar\r\n            anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n            open={this.props.open}\r\n            onClose={this.props.handler}\r\n            ContentProps={{\r\n              'aria-describedby': 'message-id',\r\n            }}\r\n            message={this.props.errorMsg}\r\n            action={this.action}\r\n        />\r\n    )\r\n  }\r\n}\r\n\r\nexport default ErrorHandler;","import React, {Component} from 'react';\r\nimport Button from '@material-ui/core/es/Button/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/es/Divider/Divider';\r\nimport Loader from '../../../processor/IO/ImageFileLoader'\r\nimport ErrorHandler from '../error/ErrorHandler'\r\n\r\nclass LoadImageAction extends Component {\r\n  state = {\r\n    error: false,\r\n    errorMsg: \"error\"\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.inputElem = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n      this.inputElem.current.click();\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    this.inputElem.current.click();\r\n  }\r\n\r\n  handleError = (msg) => {\r\n    this.setState({error: true, errorMsg: msg})\r\n  };\r\n\r\n  closeError = (msg) => {\r\n    this.setState({error: false})\r\n  };\r\n\r\n  handleChange = e => {\r\n    let loader = new Loader();\r\n    let controller = this.props.controller;\r\n    try {\r\n      loader.load(this.inputElem.current, () => {\r\n        let image = loader.getReadFile();\r\n        controller.add(image);\r\n      });\r\n    }\r\n    catch (e) {\r\n      this.handleError(e.message);\r\n    }\r\n  };\r\n\r\n  openFileDialog = () => {\r\n    this.inputElem.current.click();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n            ref={this.inputElem}\r\n            type=\"file\"\r\n            style={{\"display\" : \"none\"}}\r\n            onChange={this.handleChange}/>\r\n        <ErrorHandler\r\n            open={this.state.error}\r\n            errorMsg={this.state.errorMsg}\r\n            handler={this.closeError}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoadImageAction;\r\n","import React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/es/Button/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/es/Divider/Divider';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport ErrorHandler from '../error/ErrorHandler';\r\nimport Extensions from \"../../../data/fileExtensions\";\r\nimport saveAs from 'file-saver';\r\n\r\nconst styles = theme => ({\r\n  formControl: {\r\n    margin: theme.spacing.unit,\r\n    width: 100,\r\n  },\r\n\r\n  button: {\r\n    margin: theme.spacing.unit\r\n  }\r\n});\r\n\r\nclass SaveImageAction extends Component {\r\n  state = {\r\n    format: '',\r\n    error: false,\r\n    errorMsg: \"error\",\r\n    labelWidth: 0,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  handleError = (msg) => {\r\n    this.setState({error: true, errorMsg: msg})\r\n  };\r\n\r\n  handleFormChange= event => {\r\n   this.setState({ [event.target.name]: event.target.value });\r\n };\r\n\r\n  closeError = (msg) => {\r\n    this.setState({error: false})\r\n  };\r\n\r\n  componentDidMount() {\r\n      this.setState({\r\n        labelWidth: ReactDOM.findDOMNode(this.InputLabelRef).offsetWidth,\r\n      });\r\n    }\r\n\r\n  saveFile = () => {\r\n    try {\r\n      if(this.props.controller.numberOfImages() <= 0){\r\n        throw new Error('there isn\\'t any image to download.');\r\n      }\r\n\r\n      if(this.state.format === \"\"){\r\n          throw new Error('you have to select one image format.');\r\n      }\r\n\r\n\r\n      let controller = this.props.controller;\r\n      let format = this.state.format;\r\n\r\n      controller.getCanvas().toBlob(function(blob) {\r\n        saveAs(blob, controller.getSelectedImage().getTitle() + \".\" + format);\r\n      });\r\n    } catch (e) {\r\n      this.handleError(e.message);\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const extensions = Extensions.formats;\r\n\r\n    return (\r\n      <div>\r\n        <Typography variant=\"overline\" style={{padding: \"4px 0\"}}>\r\n          Save image\r\n        </Typography>\r\n        <Divider />\r\n        <div>\r\n        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n            <InputLabel\r\n              ref={ref => {\r\n                this.InputLabelRef = ref;\r\n              }}\r\n              htmlFor=\"outlined-format-simple\"\r\n            >\r\n              Format\r\n            </InputLabel>\r\n            <Select\r\n              value={this.state.format}\r\n              onChange={this.handleFormChange}\r\n              input={\r\n                <OutlinedInput\r\n                  labelWidth={this.state.labelWidth}\r\n                  name=\"format\"\r\n                  id=\"outlined-format-simple\"\r\n                />\r\n              }\r\n            >\r\n            {\r\n              extensions.map((format) => <MenuItem key={format.extension} value={format.extension}>{format.name}</MenuItem>)\r\n            }\r\n            </Select>\r\n          </FormControl>\r\n          </div>\r\n          <div>\r\n          <Button\r\n            className={classes.button}\r\n            label=\"Save file\"\r\n            onClick={this.saveFile}>\r\n            Download\r\n          </Button>\r\n          </div>\r\n        <ErrorHandler\r\n            open={this.state.error}\r\n            errorMsg={this.state.errorMsg}\r\n            handler={this.closeError}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSaveImageAction.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(SaveImageAction);\r\n","import ProcessImage from '../../image/ProcessImage';\r\n\r\nclass LookUpTable {\r\n  values;\r\n  constructor(operation) {\r\n    this.fillTable(operation);\r\n  }\r\n\r\n  fillTable = (operation) => {\r\n    this.values = [];\r\n    for (let i = 0; i < ProcessImage.MAX_PIXEL_VALUE; i++) {\r\n      this.appendValue(operation.perform(i));\r\n    }\r\n  };\r\n\r\n  getValue = level => {\r\n    if (this.inputIsValid(level)) {\r\n      return this.values[level];\r\n    } else {\r\n      return undefined;\r\n    }\r\n  };\r\n\r\n  appendValue = value => {\r\n    if (this.inputIsValid(value)) {\r\n      this.values.push(value);\r\n    }\r\n  };\r\n\r\n  inputIsValid = (input) => {\r\n    return (input >= 0\r\n        && input < ProcessImage.MAX_PIXEL_VALUE);\r\n  };\r\n}\r\n\r\nexport default LookUpTable;","class BlackAndWhite {\r\n  perform = input => {\r\n    return input;\r\n  }\r\n}\r\n\r\nexport default BlackAndWhite;","import React, {Component} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport LookUpTable from '../../../../../processor/operations/point/LookUpTable';\r\nimport BlackAndWhiteOperation from '../../../../../processor/operations/point/lineal/BlackAndWhite';\r\nclass BlackAndWhite extends Component {\r\n  operationHasBeenApplied;\r\n\r\n  applyOperation = () => {\r\n    let {controller} = this.props;\r\n    if (controller.isAnyImageSelected()) {\r\n      if (!this.operationHasBeenApplied) {\r\n        let image = controller.getSelectedImage();\r\n        image.createNewState();\r\n        image.setNextState();\r\n        this.operationHasBeenApplied = true;\r\n      }\r\n      let blackAndWhite = new BlackAndWhiteOperation();\r\n      let lut = new LookUpTable(blackAndWhite);\r\n      controller.applyPointOperation(lut, 'brightness');\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <Button\r\n            variant=\"fab\"\r\n            color=\"secondary\"\r\n            aria-label=\"Add\"\r\n            onClick={this.applyOperation}>\r\n          <AddIcon />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BlackAndWhite;","/**\r\n * This class simulates a\r\n * lineal function between two\r\n * points.\r\n */\r\nclass ClampedLinealFunction {\r\n  a;\r\n  b;\r\n\r\n  constructor(p1, p2) {\r\n    this.setEquationComponents(p1, p2);\r\n  }\r\n\r\n  get = x => {\r\n    if (x === undefined)\r\n      throw new Error(\"x is undefined.\");\r\n    return this.a * x + this.b;\r\n  };\r\n\r\n  setEquationComponents = (p1, p2) => {\r\n    if (p1 === undefined || p2 === undefined) {\r\n      throw new Error(\"points can not be undefined.\");\r\n    }\r\n    if (p1.x === p2.x) {\r\n      throw new Error(\"points x coordinate can not be equal.\");\r\n    }\r\n    this.a = (p2.y - p1.y) / (p2.x - p1.x);\r\n    this.b = p1.y - this.a * p1.x;\r\n  };\r\n}\r\n\r\nexport default ClampedLinealFunction;","import ProcessImage from '../../../image/ProcessImage';\r\nimport LinealFunction from './LinealFunction';\r\n\r\nconst FUNCTION_MIN = ProcessImage.MIN_PIXEL_VALUE;\r\nconst FUNCTION_MAX = ProcessImage.MAX_PIXEL_VALUE - 1;\r\n\r\nclass LinealPicewiseAdjustment {\r\n  points;\r\n  functions;\r\n\r\n  constructor() {\r\n    let p1 =\r\n        {x: FUNCTION_MIN,  y: FUNCTION_MIN};\r\n    let p2 =\r\n        {x: FUNCTION_MAX, y: FUNCTION_MAX};\r\n    this.points = [p1, p2];\r\n    this.setFunctions();\r\n  }\r\n\r\n  insert = point => {\r\n    if (!this.valueIsValid(point.x) || !this.valueIsValid(point.y))\r\n      throw new Error('point has not valid values: ' + point.x + \" \" + point.y);\r\n\r\n    if (point.x === FUNCTION_MAX) {\r\n      this.points.pop();\r\n      this.points.push(point);\r\n    } else {\r\n      let insertionIndex = this.getIntervalIndex(point.x);\r\n      if (this.points[insertionIndex - 1].x === point.x) {\r\n        this.points.splice(insertionIndex - 1, 1, point);\r\n      } else {\r\n        this.points.splice(insertionIndex, 0, point);\r\n      }\r\n    }\r\n    this.setFunctions();\r\n  };\r\n\r\n  perform = level => {\r\n    if (!this.valueIsValid(level)) {\r\n      throw new Error('level is not in range.');\r\n    }\r\n    let functionIndex = this.getIntervalIndex(level) - 1;\r\n    let value = this.functions[functionIndex].get(level);\r\n    return this.clampValue(value);\r\n  };\r\n\r\n  getIntervalIndex = value => {\r\n    for (let i = 1; i < this.points.length; i++) {\r\n      if (value < this.points[i].x)\r\n        return i;\r\n    }\r\n    return this.points.length - 1;\r\n  };\r\n\r\n  setFunctions = () => {\r\n    this.functions = [];\r\n    for (let i = 0; i < this.points.length - 1; i++) {\r\n      let firstPoint = this.points[i];\r\n      let secondPoint = this.points[i + 1];\r\n      this.functions.push(new LinealFunction(firstPoint, secondPoint));\r\n    }\r\n  };\r\n\r\n  valueIsValid = value => {\r\n    return (value >= FUNCTION_MIN\r\n         && value <= FUNCTION_MAX);\r\n  };\r\n\r\n  clampValue = value => {\r\n    if (value < FUNCTION_MIN) {\r\n      return FUNCTION_MIN;\r\n    }\r\n    if (value > FUNCTION_MAX) {\r\n      return FUNCTION_MAX;\r\n    }\r\n    return Math.round(value);\r\n  }\r\n}\r\n\r\nexport default LinealPicewiseAdjustment;","import React, {Component} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Theme from '../../../../theme';\r\nimport ProcessImage from '../../../../../processor/image/ProcessImage';\r\n\r\nimport {\r\n  LineSeries,\r\n  XYPlot,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalGridLines,\r\n  HorizontalGridLines,\r\n} from 'react-vis';\r\n\r\nimport LinealPicewiseAdjustmentOperation from '../../../../../processor/operations/point/lineal/LinealPicewiseAdjustment';\r\nimport LookUpTable from '../../../../../processor/operations/point/LookUpTable';\r\n\r\nconst MAX_POINTS = 12;\r\n\r\nclass LinealPicewiseAdjustment extends Component {\r\n  operationHasBeenApplied = false;\r\n  state = {\r\n    x: 0.0,\r\n    y: 0.0,\r\n    linealPicewiseOperation: null,\r\n    maxPointsReached: false\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state.linealPicewiseOperation =\r\n        new LinealPicewiseAdjustmentOperation();\r\n    this.applyOperation();\r\n  }\r\n\r\n  applyOperation = () => {\r\n    let {controller} = this.props;\r\n    if (controller.isAnyImageSelected()) {\r\n      if (!this.operationHasBeenApplied) {\r\n        let image = controller.getSelectedImage();\r\n        image.createNewState();\r\n        image.setNextState();\r\n        this.operationHasBeenApplied = true;\r\n      }\r\n      let lut = new LookUpTable(this.state.linealPicewiseOperation);\r\n      controller.applyPointOperation(lut, 'brightness');\r\n    }\r\n  };\r\n\r\n  onChipDelete = point => () => {\r\n    console.log(point.x + \" \" + point.y);\r\n  };\r\n\r\n  updateState = () => {\r\n    this.setState({linealPicewiseOperator: this.state.linealPicewiseOperation});\r\n  };\r\n\r\n  onInsertionValueChanged = component => event => {\r\n    let value = event.target.value;\r\n    if (value >= ProcessImage.MIN_PIXEL_VALUE\r\n        && value < ProcessImage.MAX_PIXEL_VALUE) {\r\n      this.setState({[component]: value});\r\n    }\r\n  };\r\n\r\n  addPoint = () => {\r\n    let {x, y, linealPicewiseOperation} = this.state;\r\n    x = Number.parseFloat(x);\r\n    y = Number.parseFloat(y);\r\n    if ((typeof x) !== 'string' && (typeof y) !== 'string') {\r\n      linealPicewiseOperation.insert({x: x, y: y});\r\n      if (linealPicewiseOperation.points.length === MAX_POINTS) {\r\n        this.setState({maxPointsReached: true});\r\n      }\r\n      this.updateState();\r\n      this.applyOperation();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let points = this.state.linealPicewiseOperation.points;\r\n    return (\r\n        <div>\r\n          <div style={{display:\"flex\", justifyContent: \"center\", width: \"100%\"}}>\r\n            <XYPlot width={200} height={200}>\r\n              <HorizontalGridLines />\r\n              <VerticalGridLines />\r\n              <XAxis />\r\n              <YAxis />\r\n              <LineSeries\r\n                  color={Theme.palette.secondary.main}\r\n                  data={points}\r\n              />\r\n            </XYPlot>\r\n          </div>\r\n          <div>\r\n            {points.map((point) => {\r\n              return (<Chip\r\n                        key={\"x: \" + point.x + \" y: \" + point.y}\r\n                        style={{margin: \"5px\"}}\r\n                        label={\"x: \" + point.x + \" y: \" + point.y}\r\n                        color=\"secondary\"\r\n                        variant=\"outlined\"\r\n                      />);\r\n            })}\r\n          </div>\r\n          <div>\r\n            <TextField\r\n                style={{margin: \"15px\"}}\r\n                label=\"X\"\r\n                value={this.state.x}\r\n                type=\"number\"\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                margin=\"normal\"\r\n                onChange={this.onInsertionValueChanged('x')}\r\n            />\r\n            <TextField\r\n                style={{margin: \"15px\"}}\r\n                label=\"Y\"\r\n                value={this.state.y}\r\n                type=\"number\"\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                margin=\"normal\"\r\n                onChange={this.onInsertionValueChanged('y')}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Button\r\n                mini\r\n                variant=\"fab\"\r\n                color=\"secondary\"\r\n                aria-label=\"Add\"\r\n                onClick={this.addPoint}\r\n                disabled={this.state.maxPointsReached}>\r\n              <AddIcon />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LinealPicewiseAdjustment;\r\n","import ProcessImage from '../../../image/ProcessImage';\r\n\r\nclass BrightnessAndContrast {\r\n  newMean;\r\n  newStdVar;\r\n  oldMean;\r\n  oldStdVar;\r\n\r\n  constructor(oldMean, oldStdVar, newMean, newStdVar) {\r\n    this.setOldMean(oldMean);\r\n    this.setNewMean(newMean);\r\n    this.setOldStdVar(newMean);\r\n    this.setNewStdVar(newStdVar);\r\n  }\r\n\r\n  setOldMean = oldMean => {\r\n    if (this.valueIsValid(oldMean))\r\n      this.oldMean = oldMean;\r\n  };\r\n\r\n  setOldStdVar = oldStdVar => {\r\n    if (this.valueIsValid(oldStdVar))\r\n      this.oldStdVar = oldStdVar;\r\n  };\r\n\r\n  setNewMean = newMean => {\r\n    if (this.valueIsValid(newMean)) {\r\n      this.newMean = newMean;\r\n    }\r\n  };\r\n\r\n  setNewStdVar = newStdVar => {\r\n    if (this.valueIsValid(newStdVar))\r\n      this.newStdVar = newStdVar;\r\n  };\r\n\r\n  perform = level => {\r\n    if (level !== undefined) {\r\n      let value = Math.round((this.newStdVar / this.oldStdVar) * (level - this.oldMean) + this.newMean);\r\n      return this.clampValue(value);\r\n    } else  {\r\n      return undefined;\r\n    }\r\n  };\r\n\r\n  valueIsValid = value => {\r\n    return (value >= ProcessImage.MIN_PIXEL_VALUE\r\n         && value < ProcessImage.MAX_PIXEL_VALUE);\r\n  };\r\n\r\n  clampValue = value => {\r\n    if (value < ProcessImage.MIN_PIXEL_VALUE) {\r\n      return ProcessImage.MIN_PIXEL_VALUE;\r\n    }\r\n    if (value >= ProcessImage.MAX_PIXEL_VALUE) {\r\n      return ProcessImage.MAX_PIXEL_VALUE - 1;\r\n    }\r\n    return value;\r\n  }\r\n}\r\n\r\nexport default BrightnessAndContrast;","import React, {Component} from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Slider from '@material-ui/lab/Slider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport ProcessImage from '../../../../../processor/image/ProcessImage';\r\nimport Theme from '../../../../theme/'\r\nimport BrightnessAndContrastOperation from '../../../../../processor/operations/point/lineal/BrightnessAndContrast';\r\nimport LookUpTable from '../../../../../processor/operations/point/LookUpTable';\r\n\r\nconst styles = {\r\n  root: {\r\n    width: 420,\r\n    display: \"flex\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n    alignContent: \"space-between\",\r\n    margin: \"auto\"\r\n  },\r\n  slider: {\r\n    width: '200px',\r\n    margin: 'auto',\r\n    padding: '22px 0px',\r\n  },\r\n  thumb: {\r\n    background: Theme.palette.secondary.main\r\n  }\r\n};\r\n\r\nclass BrightnessAndContrast extends Component {\r\n  operationHasBeenApplied = false;\r\n  brightnessAndContrast;\r\n  state = {\r\n    brightnessValue: 0.0,\r\n    contrastValue: 0.0\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    let controller = this.props.controller;\r\n    this.brightnessAndContrast =\r\n        new BrightnessAndContrastOperation(0.0, 0.0, 0.0, 0.0);\r\n    let histogram = controller.getCurrentHistogram();\r\n    if (histogram !== undefined) {\r\n      this.state.brightnessValue = histogram.getMean().brightness;\r\n      this.state.contrastValue = histogram.getStdVar().brightness;\r\n      this.brightnessAndContrast.setOldMean(this.state.brightnessValue);\r\n      this.brightnessAndContrast.setOldStdVar(this.state.contrastValue);\r\n    }\r\n  }\r\n\r\n  applyOperation = () => {\r\n    let {controller} = this.props;\r\n    if (controller.isAnyImageSelected()) {\r\n      if (!this.operationHasBeenApplied) {\r\n        let image = controller.getSelectedImage();\r\n        image.createNewState();\r\n        image.setNextState();\r\n        this.operationHasBeenApplied = true;\r\n      }\r\n      let {brightnessValue, contrastValue} = this.state;\r\n      this.brightnessAndContrast.setNewMean(brightnessValue);\r\n      this.brightnessAndContrast.setNewStdVar(contrastValue);\r\n      let lut = new LookUpTable(this.brightnessAndContrast);\r\n      controller.applyPointOperation(lut, 'brightness');\r\n    }\r\n  };\r\n\r\n  onBrightnessSliderChange = (event, value) => {\r\n    this.setState({brightnessValue: value});\r\n    this.applyOperation();\r\n  };\r\n\r\n  onBrightnessTextFieldChange = event => {\r\n    let value = event.target.value;\r\n    if (value < ProcessImage.MAX_PIXEL_VALUE\r\n        && value >= ProcessImage.MIN_PIXEL_VALUE) {\r\n      this.setState({brightnessValue: Number.parseFloat(event.target.value)});\r\n    }\r\n    this.applyOperation();\r\n  };\r\n\r\n  onContrastSliderChange = (event, value) => {\r\n    this.setState({contrastValue: value});\r\n    this.applyOperation();\r\n  };\r\n\r\n  onContrastTextFieldChange = event => {\r\n    let value = event.target.value;\r\n    if (value < ProcessImage.MAX_PIXEL_VALUE\r\n        && value >= ProcessImage.MIN_PIXEL_VALUE) {\r\n      this.setState({contrastValue: event.target.value});\r\n    }\r\n    this.applyOperation();\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    let {brightnessValue, contrastValue} = this.state;\r\n    return(\r\n          <div>\r\n            <div className={classes.root}>\r\n              <Typography\r\n                  id=\"label\"\r\n                  style={{padding: \"15px\"}}>\r\n                Brightness\r\n              </Typography>\r\n              <Slider\r\n                  classes={\r\n                    { container: classes.slider,\r\n                      track: classes.thumb,\r\n                      thumb: classes.thumb}\r\n                  }\r\n                  min = {ProcessImage.MIN_PIXEL_VALUE}\r\n                  max = {ProcessImage.MAX_PIXEL_VALUE - 1}\r\n                  value={brightnessValue}\r\n                  aria-labelledby=\"label\"\r\n                  onChange={this.onBrightnessSliderChange}\r\n              />\r\n              <TextField\r\n                  style={{margin: \"15px\"}}\r\n                  id=\"standard-number\"\r\n                  value={brightnessValue}\r\n                  type=\"number\"\r\n                  className={classes.textField}\r\n                  max={255}\r\n                  margin=\"normal\"\r\n                  onChange={this.onBrightnessTextFieldChange}\r\n                  color=\"secondary\"\r\n              />\r\n            </div>\r\n            <div className={classes.root}>\r\n              <Typography\r\n                  id=\"label\"\r\n                  style={{padding: \"15px\"}}>\r\n                Contrast\r\n              </Typography>\r\n              <Slider\r\n                  classes={\r\n                    { container: classes.slider,\r\n                      track: classes.thumb,\r\n                      thumb: classes.thumb}\r\n                  }\r\n                  min = {ProcessImage.MIN_PIXEL_VALUE}\r\n                  max = {ProcessImage.MAX_PIXEL_VALUE - 1}\r\n                  value={contrastValue}\r\n                  aria-labelledby=\"label\"\r\n                  onChange={this.onContrastSliderChange}\r\n              />\r\n              <TextField\r\n                  style={{margin: \"15px\"}}\r\n                  id=\"standard-number\"\r\n                  value={contrastValue}\r\n                  type=\"number\"\r\n                  className={classes.textField}\r\n                  max={255}\r\n                  margin=\"normal\"\r\n                  onChange={this.onContrastTextFieldChange}\r\n                  color=\"secondary\"\r\n              />\r\n            </div>\r\n          </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(BrightnessAndContrast);\r\n","import ProcessImage from '../../../image/ProcessImage';\r\n\r\nconst FUNCTION_MIN = ProcessImage.MIN_PIXEL_VALUE;\r\nconst FUNCTION_MAX = ProcessImage.MAX_PIXEL_VALUE - 1;\r\n\r\nclass HistogramEqualization {\r\n  histogram;\r\n  k;\r\n\r\n  constructor(histogram) {\r\n    this.histogram = histogram;\r\n    this.k = this.histogram.getNumberOfPixels() / FUNCTION_MAX;\r\n  }\r\n\r\n  perform = level => {\r\n    return this.clampValue(Math.round(this.histogram.getAccumulativeCount(level).brightness / this.k) - 1);\r\n  };\r\n\r\n  valueIsValid = value => {\r\n    return (value >= FUNCTION_MIN\r\n        && value <= FUNCTION_MAX);\r\n  };\r\n\r\n  clampValue = value => {\r\n    if (value < FUNCTION_MIN) {\r\n      return FUNCTION_MIN;\r\n    }\r\n    if (value > FUNCTION_MAX) {\r\n      return FUNCTION_MAX;\r\n    }\r\n    return Math.round(value);\r\n  }\r\n}\r\n\r\nexport default HistogramEqualization;","import React, {Component} from 'react';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport HistogramEqualizationOperation\r\n  from '../../../../../processor/operations/point/non-lineal/HistogramEqualization';\r\nimport LookUpTable\r\n  from '../../../../../processor/operations/point/LookUpTable';\r\n\r\nclass HistogramEqualization extends Component {\r\n  operationHasBeenApplied;\r\n\r\n  applyOperation = () => {\r\n    let {controller} = this.props;\r\n    if (controller.isAnyImageSelected()\r\n        && !this.operationHasBeenApplied) {\r\n      let image = controller.getSelectedImage();\r\n      let histogram = controller.getCurrentHistogram();\r\n      image.createNewState();\r\n      image.setNextState();\r\n      let equalization =\r\n          new HistogramEqualizationOperation(histogram);\r\n      let lut = new LookUpTable(equalization);\r\n      controller.applyPointOperation(lut, 'brightness');\r\n      this.operationHasBeenApplied = true;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n        <div>\r\n          <Button\r\n              style={{margin: \"10px\"}}\r\n              variant=\"extendedFab\"\r\n              color=\"secondary\"\r\n              onClick={this.applyOperation}>\r\n            Apply Equalization\r\n          </Button>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HistogramEqualization;\r\n","import ProcessImage from '../../../image/ProcessImage';\r\n\r\nconst FUNCTION_MIN = ProcessImage.MIN_PIXEL_VALUE;\r\nconst FUNCTION_MAX = ProcessImage.MAX_PIXEL_VALUE - 1;\r\n\r\nclass HistogramSpecification {\r\n  toTransformHistogram;\r\n  referenceHistogram;\r\n\r\n  constructor(toTransformHistogram, referenceHistogram) {\r\n    this.toTransformHistogram = toTransformHistogram;\r\n    this.referenceHistogram = referenceHistogram;\r\n  }\r\n\r\n  perform = level => {\r\n    if (!this.valueIsValid(level))\r\n      throw new Error('invalid level: ' + level);\r\n\r\n    let originalValue = this.toTransformHistogram.getAccumulativeProbability(level).brightness;\r\n    let outputLevel = 0;\r\n    while (outputLevel <= FUNCTION_MAX) {\r\n      let referenceValue =\r\n          this.referenceHistogram.getAccumulativeProbability(outputLevel).brightness;\r\n      if (referenceValue >= originalValue)\r\n        return outputLevel;\r\n      outputLevel += 1;\r\n    }\r\n  };\r\n\r\n  valueIsValid = value => {\r\n    return (value >= FUNCTION_MIN\r\n        && value <= FUNCTION_MAX);\r\n  };\r\n}\r\n\r\nexport default HistogramSpecification;","import React, {Component} from 'react';\r\nimport Icon from '@material-ui/core/Icon/Icon';\r\nimport Typography from '@material-ui/core/Typography/Typography';\r\nimport Divider from '@material-ui/core/Divider/Divider';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Theme from '../../../../theme';\r\n\r\nimport HistogramSpecificationOperation\r\n  from '../../../../../processor/operations/point/non-lineal/HistogramSpecification';\r\nimport Button from '@material-ui/core/Button/Button';\r\nimport LookUpTable from '../../../../../processor/operations/point/LookUpTable';\r\n\r\nclass HistogramSpecification extends Component {\r\n  histogramSpecificationOperation;\r\n  operationHasBeenApplied = false;\r\n\r\n  state = {\r\n    referenceHistogramTitle: \"\",\r\n    referenceHistogram: undefined\r\n  };\r\n\r\n  applyOperation = () => {\r\n    console.log('clicked');\r\n    let {controller} = this.props;\r\n    let {referenceHistogram} = this.state;\r\n    if (controller.isAnyImageSelected()) {\r\n      if (referenceHistogram !== undefined) {\r\n        let image = controller.getSelectedImage();\r\n        if (!this.operationHasBeenApplied) {\r\n          image = controller.getSelectedImage();\r\n          image.createNewState();\r\n          image.setNextState();\r\n          this.operationHasBeenApplied = true;\r\n        }\r\n        let selectedHistogram = controller.getCurrentHistogram();\r\n        this.histogramSpecificationOperation =\r\n            new HistogramSpecificationOperation(selectedHistogram, referenceHistogram);\r\n        let lut = new LookUpTable(this.histogramSpecificationOperation);\r\n        controller.applyPointOperation(lut, 'brightness');\r\n      }\r\n    }\r\n  };\r\n\r\n  handleChange = event => {\r\n    let {controller} = this.props;\r\n    let imageName = event.target.value;\r\n    let histogramIndex = controller.getImageIndex(imageName);\r\n    let selectedHistogram =\r\n        controller.histograms[histogramIndex];\r\n    this.setState({\r\n      referenceHistogramTitle: imageName,\r\n      referenceHistogram: selectedHistogram\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {controller} = this.props;\r\n    const imageTitles = controller.getImageTitles();\r\n    return(\r\n        <div>\r\n          <div style={{display: \"flex\", flexDirection:\"column\", alignItems: \"center\"}}>\r\n            <FormControl style={{minWidth: 200, margin: Theme.spacing.unit}}>\r\n              <InputLabel htmlFor=\"age-simple\">Reference Image</InputLabel>\r\n              <Select\r\n                  value={this.state.referenceHistogramTitle}\r\n                  inputProps={{\r\n                    name: 'referenceHistogram',\r\n                    id: 'age-simple',\r\n                  }}\r\n                  onChange={this.handleChange}\r\n                  disabled={!controller.isAnyImageSelected()}\r\n              >\r\n                {imageTitles.map(title => {\r\n                  return <MenuItem\r\n                      key={title}\r\n                      value={title}>\r\n                    {title}\r\n                    </MenuItem>\r\n                })}\r\n              </Select>\r\n            </FormControl>\r\n            <Button\r\n                style={{margin: \"10px\"}}\r\n                variant=\"extendedFab\"\r\n                color=\"secondary\"\r\n                onClick={this.applyOperation}>\r\n              Apply Specification\r\n            </Button>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HistogramSpecification;\r\n","import ProcessImage from '../../../image/ProcessImage';\r\n\r\nconst FUNCTION_MIN = ProcessImage.MIN_PIXEL_VALUE;\r\nconst FUNCTION_MAX = ProcessImage.MAX_PIXEL_VALUE - 1;\r\n\r\nclass GammaCorrection {\r\n  gamma;\r\n  static GAMMA_MIN = 0.0;\r\n  static GAMMA_MAX = 20.0;\r\n\r\n  constructor(gamma) {\r\n    this.setGamma(gamma);\r\n  }\r\n\r\n  setGamma = gamma => {\r\n    if (gamma > GammaCorrection.GAMMA_MIN\r\n        && gamma <= GammaCorrection.GAMMA_MAX) {\r\n      this.gamma = gamma;\r\n    }\r\n  };\r\n\r\n  perform = level => {\r\n    if (!this.valueIsValid(level)) {\r\n      throw new Error('level is not valid: ' + level);\r\n    }\r\n    let value = FUNCTION_MAX * Math.pow(level / FUNCTION_MAX, this.gamma);\r\n    return this.clampValue(value);\r\n  };\r\n\r\n  valueIsValid = value => {\r\n    return (value >= FUNCTION_MIN\r\n        && value <= FUNCTION_MAX);\r\n  };\r\n\r\n  clampValue = value => {\r\n    if (value < FUNCTION_MIN) {\r\n      return FUNCTION_MIN;\r\n    }\r\n    if (value > FUNCTION_MAX) {\r\n      return FUNCTION_MAX;\r\n    }\r\n    return Math.round(value);\r\n  }\r\n}\r\n\r\nexport default GammaCorrection;","import React, {Component} from 'react';\r\nimport Icon from '@material-ui/core/Icon/Icon';\r\nimport Typography from '@material-ui/core/Typography/Typography';\r\nimport Divider from '@material-ui/core/Divider/Divider';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Slider from '@material-ui/lab/Slider/Slider';\r\nimport Theme from '../../../../theme';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField/TextField';\r\n\r\nimport GammaCorrectionOperation from '../../../../../processor/operations/point/non-lineal/GammaCorrection';\r\nimport LookUpTable from '../../../../../processor/operations/point/LookUpTable';\r\n\r\nimport {\r\n  HorizontalGridLines, LineSeries,\r\n  VerticalGridLines,\r\n  XAxis,\r\n  XYPlot, YAxis,\r\n} from 'react-vis/es';\r\nimport Button from '@material-ui/core/Button/Button';\r\n\r\nconst styles = {\r\n  root: {\r\n    width: 420,\r\n    display: \"flex\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n    alignContent: \"space-between\",\r\n    margin: \"auto\"\r\n  },\r\n  slider: {\r\n    width: '150px',\r\n    margin: 'auto',\r\n  },\r\n  thumb: {\r\n    background: Theme.palette.secondary.main\r\n  }\r\n};\r\n\r\nconst MIN_GAMMA = GammaCorrectionOperation.GAMMA_MIN + 1.0;\r\nconst MAX_GAMMA = GammaCorrectionOperation.GAMMA_MAX;\r\n\r\nclass GammaCorrection extends Component {\r\n  operationHasBeenApplied = false;\r\n\r\n  state = {\r\n    inverted: false,\r\n    gamma: MIN_GAMMA\r\n  };\r\n\r\n  applyOperation = () => {\r\n    let {controller} = this.props;\r\n    if (controller.isAnyImageSelected()) {\r\n      if (!this.operationHasBeenApplied) {\r\n        let image = controller.getSelectedImage();\r\n        image.createNewState();\r\n        image.setNextState();\r\n        this.operationHasBeenApplied = true;\r\n      }\r\n      console.log(this.getGammaValue());\r\n      let gamma = new GammaCorrectionOperation(this.getGammaValue());\r\n      let lut = new LookUpTable(gamma);\r\n      controller.applyPointOperation(lut, 'brightness');\r\n    }\r\n  };\r\n\r\n  getGammaData = () => {\r\n    const interval = 0.01;\r\n    const intervalMax = 1.0;\r\n\r\n    let data = [];\r\n    for (let i = 0.0; i < intervalMax; i += interval) {\r\n      data.push({x: i, y: Math.pow(i, this.getGammaValue())});\r\n    }\r\n    return data;\r\n  };\r\n\r\n  invertedChecked = event => {\r\n    this.setState({inverted: event.target.checked});\r\n  };\r\n\r\n  getGammaValue = () => {\r\n    if (this.state.inverted) {\r\n      return 1.0 / this.state.gamma;\r\n    } else {\r\n      return this.state.gamma;\r\n    }\r\n  };\r\n\r\n  onGammaChange = (event, value) => {\r\n    this.setState({gamma: value});\r\n  };\r\n\r\n  onGammaTextChange = event => {\r\n    let value = Number.parseFloat(event.target.value);\r\n    if (value >= MIN_GAMMA && value <= MAX_GAMMA) {\r\n      //console.log(\"event:\" + event.target.value + \" \" + value);\r\n      this.setState({gamma: value});\r\n      //console.log(\"after: \" + this.state.gamma);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n        <div>\r\n          <div style={{display:\"flex\", justifyContent: \"center\", width: \"100%\"}}>\r\n            <XYPlot width={200} height={200}>\r\n              <HorizontalGridLines />\r\n              <VerticalGridLines />\r\n              <XAxis />\r\n              <YAxis />\r\n              <LineSeries\r\n                  curve={'curveMonotoneX'}\r\n                  color={Theme.palette.secondary.main}\r\n                  data={this.getGammaData()}\r\n              />\r\n            </XYPlot>\r\n          </div>\r\n          <div className={classes.root}>\r\n            <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                      checked={this.state.inverted}\r\n                      onChange={this.invertedChecked}\r\n                      value=\"checkedA\"\r\n                  />\r\n                }\r\n                label=\"inverse\"/>\r\n            <Slider\r\n                classes={\r\n                  { container: classes.slider,\r\n                    track: classes.thumb,\r\n                    thumb: classes.thumb}\r\n                }\r\n                min = {MIN_GAMMA}\r\n                max = {MAX_GAMMA}\r\n                value={this.state.gamma}\r\n                aria-labelledby=\"label\"\r\n                onChange={this.onGammaChange}\r\n            />\r\n            <TextField\r\n                style={{margin: \"15px\"}}\r\n                value={this.state.gamma}\r\n                type=\"number\"\r\n                margin=\"normal\"\r\n                onChange={this.onGammaTextChange}\r\n                color=\"secondary\"\r\n            />\r\n          </div>\r\n          <Button\r\n              style={{margin: \"10px\"}}\r\n              variant=\"extendedFab\"\r\n              color=\"secondary\"\r\n              onClick={this.applyOperation}>\r\n            Apply Gamma Correction\r\n          </Button>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(GammaCorrection);\r\n","import ProcessImage from '../../../image/ProcessImage';\r\n\r\nclass ImageDifference {\r\n  resultImage;\r\n\r\n  perform = (image1, image2) => {\r\n      if (!this.imagesHaveTheSameSize(image1, image2))\r\n        throw new Error('images do not have the same size');\r\n\r\n      let width = image1.getWidth();\r\n      let height = image1.getHeight();\r\n      this.resultImage =\r\n          new ProcessImage('difference.png',width, height);\r\n      for (let i = 0; i < width; i++) {\r\n        for (let j = 0; j < height; j++) {\r\n          let color1 = image1.getBrightness(i, j);\r\n          let color2 = image2.getBrightness(i, j);\r\n          let difference = Math.abs(color1 - color2);\r\n          this.resultImage.setBrightness(i, j, difference);\r\n          this.resultImage.setAlphaComponent(i, j, 255);\r\n        }\r\n      }\r\n  };\r\n\r\n  imagesHaveTheSameSize = (image1, image2) => {\r\n    return (image1.getWidth() === image2.getWidth()\r\n         && image1.getHeight() === image2.getHeight());\r\n  };\r\n}\r\n\r\nexport default ImageDifference;","import React, {Component} from 'react';\r\nimport Icon from '@material-ui/core/Icon/Icon';\r\nimport Typography from '@material-ui/core/Typography/Typography';\r\nimport Divider from '@material-ui/core/Divider/Divider';\r\nimport FormControl from '@material-ui/core/FormControl/FormControl';\r\nimport Theme from '../../../../theme';\r\nimport InputLabel from '@material-ui/core/InputLabel/InputLabel';\r\nimport Select from '@material-ui/core/Select/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem/MenuItem';\r\nimport Button from '@material-ui/core/Button/Button';\r\nimport ErrorHandler from '../../../error/ErrorHandler';\r\nimport ImageDifferenceOperation\r\n  from '../../../../../processor/operations/point/non-lineal/ImageDifference';\r\n\r\n\r\nclass ImageDifference extends Component {\r\n  state = {\r\n    imageTitle: \"\",\r\n    referenceImage: undefined,\r\n    error: false,\r\n    errorMsg: ''\r\n  };\r\n\r\n  applyOperation = () => {\r\n    let {controller} = this.props;\r\n    let {referenceImage} = this.state;\r\n    if (controller.isAnyImageSelected()) {\r\n      if (referenceImage !== undefined) {\r\n        let operation = new ImageDifferenceOperation();\r\n        let selectedImage = controller.getSelectedImage();\r\n        try {\r\n          operation.perform(selectedImage, referenceImage);\r\n          controller.add(operation.resultImage);\r\n        }\r\n        catch (e) {\r\n          this.setState({error: true, errorMsg: e.message});\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  closeError = () => {\r\n    this.setState({error: false});\r\n  };\r\n\r\n  handleChange = event => {\r\n    let {controller} = this.props;\r\n    let imageName = event.target.value;\r\n    let imageIndex = controller.getImageIndex(imageName);\r\n    let selectedImage =\r\n        controller.images[imageIndex];\r\n    this.setState({\r\n      imageTitle: imageName,\r\n      referenceImage: selectedImage\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {controller} = this.props;\r\n    const imageTitles = controller.getImageTitles();\r\n    return(\r\n        <div>\r\n          <div style={{display: \"flex\", flexDirection:\"column\", alignItems: \"center\"}}>\r\n            <FormControl style={{minWidth: 200, margin: Theme.spacing.unit}}>\r\n              <InputLabel htmlFor=\"age-simple\">Reference Image</InputLabel>\r\n              <Select\r\n                  value={this.state.imageTitle}\r\n                  inputProps={{\r\n                    name: 'referenceHistogram',\r\n                    id: 'age-simple',\r\n                  }}\r\n                  onChange={this.handleChange}\r\n                  disabled={!controller.isAnyImageSelected()}\r\n              >\r\n                {imageTitles.map(title => {\r\n                  return <MenuItem\r\n                      key={title}\r\n                      value={title}>\r\n                    {title}\r\n                  </MenuItem>\r\n                })}\r\n              </Select>\r\n            </FormControl>\r\n            <Button\r\n                style={{margin: \"10px\"}}\r\n                variant=\"extendedFab\"\r\n                color=\"secondary\"\r\n                onClick={this.applyOperation}>\r\n              Apply Difference\r\n            </Button>\r\n          </div>\r\n          <ErrorHandler\r\n              open={this.state.error}\r\n              errorMsg={this.state.errorMsg}\r\n              handler={this.closeError}/>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageDifference;\r\n","import ImageDifference from './ImageDifference';\r\n\r\nclass ChangesDetection {\r\n  threshold;\r\n  resultImage;\r\n\r\n  constructor(threshold) {\r\n    this.threshold = threshold;\r\n  }\r\n\r\n  perform = (image1, image2) => {\r\n    let difference = new ImageDifference();\r\n    difference.perform(image1, image2);\r\n    this.resultImage = difference.resultImage;\r\n\r\n    for (let i = 0; i < this.resultImage.getWidth(); i++) {\r\n      for (let j = 0; j < this.resultImage.getHeight(); j++) {\r\n        let color = this.resultImage.getBrightness(i, j);\r\n        if (color > this.threshold) {\r\n          this.resultImage.setRGBComponents(i, j, 255, 0, 0);\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default ChangesDetection;","import React, {Component} from 'react';\r\nimport Icon from '@material-ui/core/Icon/Icon';\r\nimport Typography from '@material-ui/core/Typography/Typography';\r\nimport Divider from '@material-ui/core/Divider/Divider';\r\nimport FormControl from '@material-ui/core/FormControl/FormControl';\r\nimport Theme from '../../../../theme';\r\nimport InputLabel from '@material-ui/core/InputLabel/InputLabel';\r\nimport Select from '@material-ui/core/Select/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem/MenuItem';\r\nimport Button from '@material-ui/core/Button/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport ErrorHandler from '../../../error/ErrorHandler';\r\nimport ChangesDetectionOperation\r\n  from '../../../../../processor/operations/point/non-lineal/ChangesDetection';\r\nimport Slider from '@material-ui/lab/Slider/Slider';\r\nimport TextField from '@material-ui/core/TextField/TextField';\r\nimport ProcessImage from '../../../../../processor/image/ProcessImage';\r\n\r\nconst styles = {\r\n  root: {\r\n    width: 420,\r\n    display: \"flex\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n    alignContent: \"space-between\",\r\n    margin: \"auto\"\r\n  },\r\n  slider: {\r\n    width: '150px',\r\n    margin: 'auto',\r\n  },\r\n  thumb: {\r\n    background: Theme.palette.secondary.main\r\n  }\r\n};\r\n\r\nconst MIN_THRESHOLD = ProcessImage.MIN_PIXEL_VALUE;\r\nconst MAX_THRESHOLD = ProcessImage.MAX_PIXEL_VALUE - 1;\r\n\r\nclass ChangesDetection extends Component {\r\n\r\n  state = {\r\n    imageTitle: \"\",\r\n    referenceImage: undefined,\r\n    error: false,\r\n    errorMsg: '',\r\n    threshold: 0.0\r\n  };\r\n\r\n  applyOperation = () => {\r\n    let {controller} = this.props;\r\n    let {referenceImage} = this.state;\r\n    if (controller.isAnyImageSelected()) {\r\n      if (referenceImage !== undefined) {\r\n        let operation = new ChangesDetectionOperation(this.state.threshold);\r\n        let selectedImage = controller.getSelectedImage();\r\n        try {\r\n          operation.perform(selectedImage, referenceImage);\r\n          controller.add(operation.resultImage);\r\n        }\r\n        catch (e) {\r\n          this.setState({error: true, errorMsg: e.message});\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  closeError = () => {\r\n    this.setState({error: false});\r\n  };\r\n\r\n  handleChange = event => {\r\n    let {controller} = this.props;\r\n    let imageName = event.target.value;\r\n    let imageIndex = controller.getImageIndex(imageName);\r\n    let selectedImage =\r\n        controller.images[imageIndex];\r\n    this.setState({\r\n      imageTitle: imageName,\r\n      referenceImage: selectedImage\r\n    });\r\n  };\r\n\r\n  onThresholdChange = (event, value) => {\r\n    this.setState({threshold: value});\r\n  };\r\n\r\n  onThresholdTextChange = event => {\r\n    let value = Number.parseFloat(event.target.value);\r\n    if (value >= MIN_THRESHOLD && value <= MAX_THRESHOLD) {\r\n      this.setState({threshold: value});\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {controller, classes} = this.props;\r\n    const imageTitles = controller.getImageTitles();\r\n    return(\r\n        <div>\r\n          <div style={{display: \"flex\", flexDirection:\"column\", alignItems: \"center\"}}>\r\n            <FormControl style={{minWidth: 200, margin: Theme.spacing.unit}}>\r\n              <InputLabel htmlFor=\"age-simple\">Reference Image</InputLabel>\r\n              <Select\r\n                  value={this.state.imageTitle}\r\n                  inputProps={{\r\n                    name: 'referenceHistogram',\r\n                    id: 'age-simple',\r\n                  }}\r\n                  onChange={this.handleChange}\r\n                  disabled={!controller.isAnyImageSelected()}\r\n              >\r\n                {imageTitles.map(title => {\r\n                  return <MenuItem\r\n                      key={title}\r\n                      value={title}>\r\n                    {title}\r\n                  </MenuItem>\r\n                })}\r\n              </Select>\r\n            </FormControl>\r\n            <div className={classes.root}>\r\n              <Slider\r\n                  classes={\r\n                    { container: classes.slider,\r\n                      track: classes.thumb,\r\n                      thumb: classes.thumb}\r\n                  }\r\n                  min = {MIN_THRESHOLD}\r\n                  max = {MAX_THRESHOLD}\r\n                  value={this.state.threshold}\r\n                  aria-labelledby=\"label\"\r\n                  onChange={this.onThresholdChange}\r\n              />\r\n              <TextField\r\n                  style={{margin: \"15px\"}}\r\n                  value={this.state.threshold}\r\n                  type=\"number\"\r\n                  margin=\"normal\"\r\n                  onChange={this.onThresholdTextChange}\r\n                  color=\"secondary\"\r\n              />\r\n            </div>\r\n            <Button\r\n                style={{margin: \"10px\"}}\r\n                variant=\"extendedFab\"\r\n                color=\"secondary\"\r\n                onClick={this.applyOperation}>\r\n              Detect changes\r\n            </Button>\r\n          </div>\r\n          <ErrorHandler\r\n              open={this.state.error}\r\n              errorMsg={this.state.errorMsg}\r\n              handler={this.closeError}/>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(ChangesDetection);\r\n","import React, {Component} from 'react';\r\nimport {\r\n  LineSeries,\r\n  FlexibleWidthXYPlot,\r\n  XAxis,\r\n  VerticalGridLines,\r\n  HorizontalGridLines,\r\n} from 'react-vis';\r\nimport Theme from '../../../../../theme';\r\n\r\nfunction CrossImageGraph(props) {\r\n  return(\r\n      <FlexibleWidthXYPlot\r\n          height={180}\r\n          margin={{left: 10, right: 10, top: 10, bottom: 40}}\r\n          stackBy=\"y\">\r\n        <VerticalGridLines />\r\n        <HorizontalGridLines />\r\n        <XAxis hideLine/>\r\n        <LineSeries\r\n            data={props.data}\r\n            color={Theme.palette.secondary.main}/>\r\n      </FlexibleWidthXYPlot>\r\n  );\r\n}\r\n\r\nexport default CrossImageGraph;","import Bresenham from 'bresenham';\r\n\r\nclass ImageCrossSelection {\r\n  static MIN_RADIUS = 0;\r\n  static MAX_RADIUS = 10;\r\n\r\n  referenceImage;\r\n  crossSelection = [];\r\n  derivativeCrossSelection = [];\r\n  radius = 1;\r\n\r\n  constructor(image, radius, startPixel, endPixel) {\r\n    this.setReferenceImage(image);\r\n    this.setRadius(radius);\r\n    this.setCrossSelection(startPixel, endPixel);\r\n  }\r\n\r\n  setRadius = radius => {\r\n    if (ImageCrossSelection.isAValidRadius(radius)) {\r\n      this.radius = radius;\r\n    }\r\n  };\r\n\r\n  setReferenceImage = image => {\r\n    if (image !== undefined) {\r\n      this.referenceImage = image;\r\n      this.crossSelection = [];\r\n      this.derivativeCrossSelection = [];\r\n    }\r\n  };\r\n\r\n  setCrossSelection = (startPixel, endPixel) => {\r\n    if (this.referenceImage === undefined) {\r\n      throw new Error('reference image is undefined.');\r\n    }\r\n    if (!this.pixelIsInRange(startPixel)) {\r\n      throw new Error('pixel {' + startPixel.x + ', ' + startPixel.y + '} is not in range.');\r\n    }\r\n    if (!this.pixelIsInRange(endPixel)) {\r\n      throw new Error('pixel {' + endPixel.x + ', ' + endPixel.y + '} is not in range.');\r\n    }\r\n\r\n    let crossSelectionPixels = Bresenham(startPixel.x, startPixel.y, endPixel.x, endPixel.y);\r\n    this.crossSelection = [];\r\n    this.derivativeCrossSelection = [];\r\n    for (let i = 0; i < crossSelectionPixels.length; i++) {\r\n      let pixel = crossSelectionPixels[i];\r\n      let pixelColor = this.getColor(pixel);\r\n      let derivativeColor = this.getDerivativeColor(crossSelectionPixels, i);\r\n      this.addData(this.crossSelection, pixel, pixelColor);\r\n      this.addData(this.derivativeCrossSelection, pixel, derivativeColor);\r\n    }\r\n  };\r\n\r\n  getFormattedCrossSelection = () => {\r\n    return this.getFormattedData(this.crossSelection);\r\n  };\r\n\r\n  getFormattedDerivativeSelection = () => {\r\n    return this.getFormattedData(this.derivativeCrossSelection);\r\n  };\r\n\r\n  getColor = pixel => {\r\n    let sumColor = 0;\r\n    let numberOfNeighbours = 0;\r\n    for (let i = pixel.x - this.radius; i <= pixel.x + this.radius; i++) {\r\n      for (let j = pixel.y - this.radius; j <= pixel.y + this.radius; j++) {\r\n        let color = this.getNormalizedColor(i, j);\r\n        if (color !== undefined) {\r\n          sumColor += color;\r\n          numberOfNeighbours += 1;\r\n        }\r\n      }\r\n    }\r\n    return sumColor / numberOfNeighbours;\r\n  };\r\n\r\n  getDerivativeColor = (crossSelectionPixels, index) => {\r\n    if (index >= 0 && index < crossSelectionPixels.length) {\r\n      let currentPixel = crossSelectionPixels[index];\r\n      if (index === crossSelectionPixels.length - 1)\r\n        return currentPixel;\r\n\r\n      let nextPixel = crossSelectionPixels[index + 1];\r\n      let currentColor = this.getColor(currentPixel);\r\n      let nextColor = this.getColor(nextPixel);\r\n      return nextColor - currentColor;\r\n    }\r\n  };\r\n\r\n  addData = (list, pixel, color) => {\r\n    list.push(\r\n        {\r\n          x: pixel.x,\r\n          y: pixel.y,\r\n          color: color,\r\n        }\r\n    );\r\n  };\r\n\r\n  getFormattedData = pixels => {\r\n    let formattedData = [];\r\n    let pointCount = 0;\r\n    for (let i = 0; i < pixels.length; i++) {\r\n      let pixel = pixels[i];\r\n      formattedData.push(\r\n          {\r\n            x: pointCount,\r\n            y: pixel.color,\r\n          }\r\n      );\r\n      pointCount += 1;\r\n    }\r\n    return formattedData;\r\n  };\r\n\r\n  pixelIsInRange = (pixel) => {\r\n    return pixel.x >= 0 && pixel.x < this.referenceImage.getWidth()\r\n        && pixel.y >= 0 && pixel.y < this.referenceImage.getHeight();\r\n  };\r\n\r\n  getNormalizedColor = (i, j) => {\r\n    try {\r\n      return this.referenceImage.getBrightness(i, j);\r\n    }\r\n    catch(e) {\r\n      return undefined;\r\n    }\r\n  };\r\n\r\n  static isAValidRadius(radius) {\r\n    return radius >= this.MIN_RADIUS && radius <= this.MAX_RADIUS;\r\n  };\r\n}\r\n\r\nexport default ImageCrossSelection;","import React, {Component} from 'react';\r\nimport Icon from '@material-ui/core/Icon/Icon';\r\nimport Typography from '@material-ui/core/Typography/Typography';\r\nimport Divider from '@material-ui/core/Divider/Divider';\r\nimport CrossImageGraph from './CrossImageGraph';\r\nimport TextField from '@material-ui/core/TextField/TextField';\r\nimport Button from '@material-ui/core/Button/Button';\r\nimport Switch from '@material-ui/core/Switch/Switch';\r\nimport FormControlLabel\r\n  from '@material-ui/core/FormControlLabel/FormControlLabel';\r\nimport Slider from '@material-ui/lab/Slider/Slider';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Theme from '../../../../../theme';\r\nimport CrossImageSelectionOperation\r\n  from '../../../../../../processor/operations/point/non-lineal/ImageCrossSelection';\r\n\r\nconst styles = {\r\n  root: {\r\n    width: 420,\r\n    display: \"flex\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n    alignContent: \"space-between\",\r\n    margin: \"auto\"\r\n  },\r\n  slider: {\r\n    width: '150px',\r\n    margin: 'auto',\r\n  },\r\n  thumb: {\r\n    background: Theme.palette.secondary.main\r\n  }\r\n};\r\n\r\nclass CrossImageSelection extends Component {\r\n  state = {\r\n    crossImageSelection: undefined,\r\n    derivative: false,\r\n    radius: 0,\r\n    beginPoint: {\r\n      x: 0,\r\n      y: 0,\r\n    },\r\n    endPoint: {\r\n      x: 0,\r\n      y: 0,\r\n    }\r\n  };\r\n\r\n  applyOperation = () => {\r\n    let {controller} = this.props;\r\n    if (controller.isAnyImageSelected()) {\r\n      let image = controller.getSelectedImage();\r\n      this.setState({\r\n        crossImageSelection: this.getSectionOperation(image, this.state.radius, this.state.beginPoint, this.state.endPoint)\r\n      });\r\n      this.displaySectionLine();\r\n    }\r\n  };\r\n\r\n  getSectionOperation = (image, radius, beginPoint, endPoint) => {\r\n    return new CrossImageSelectionOperation(image, radius, beginPoint, endPoint);\r\n  };\r\n\r\n  getData = () => {\r\n    if (this.state.crossImageSelection !== undefined) {\r\n      if (this.state.derivative) {\r\n        return this.state.crossImageSelection.getFormattedDerivativeSelection();\r\n      } else {\r\n        return this.state.crossImageSelection.getFormattedCrossSelection();\r\n      }\r\n    }\r\n  };\r\n\r\n  onInsertionValueChanged = (point, component) => event => {\r\n    let currentImage = this.props.controller.getSelectedImage();\r\n    let value = Number.parseInt(event.target.value);\r\n    if (currentImage !== undefined && value !== undefined) {\r\n      let newPoint = {\r\n        x: component === 'x' ? value : this.state[point].x,\r\n        y: component === 'y' ? value : this.state[point].y,\r\n      };\r\n      if (this.pointIsValid(newPoint, currentImage)) {\r\n        this.setState({[point]: newPoint});\r\n      }\r\n    }\r\n  };\r\n\r\n  onSwitchChecked = value => event => {\r\n    this.setState({[value]: event.target.checked});\r\n  };\r\n\r\n  pointIsValid = (point, image) => {\r\n    return point.x >= 0 && point.x < image.getWidth()\r\n        && point.y >= 0 && point.y < image.getHeight();\r\n  };\r\n\r\n  displaySectionLine = () => {\r\n    let fillCircle = (ctx, point) => {\r\n      ctx.arc(point.x, point.y, 3, 0, 2 * Math.PI, false);\r\n      ctx.fillStyle = 'red';\r\n      ctx.fill();\r\n    };\r\n\r\n    let {beginPoint, endPoint} = this.state;\r\n    let controller = this.props.controller;\r\n    controller.updateImageCanvas();\r\n    let canvas = controller.getCanvas();\r\n    let ctx = canvas.getContext('2d');\r\n    ctx.beginPath();\r\n    ctx.moveTo(beginPoint.x, beginPoint.y);\r\n    ctx.lineTo(endPoint.x, endPoint.y);\r\n    ctx.lineWidth = 2;\r\n    ctx.strokeStyle = 'red';\r\n    ctx.stroke();\r\n    fillCircle(ctx, beginPoint);\r\n    fillCircle(ctx, endPoint);\r\n  };\r\n\r\n  onRadiusChanged = (event, value) => {\r\n    this.setState({radius: value});\r\n  };\r\n\r\n  onRadiusTextChange = event => {\r\n    let value = Number.parseInt(event.target.value);\r\n    if (CrossImageSelectionOperation.isAValidRadius(value)) {\r\n      this.setState({gamma: value});\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {classes} = this.props;\r\n    return (\r\n        <div>\r\n          <div>\r\n            <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                      checked={this.state.derivative}\r\n                      onChange={this.onSwitchChecked('derivative')}\r\n                      value=\"checkedA\"\r\n                  />\r\n                }\r\n                label=\"derivative\"/>\r\n          </div>\r\n          <div>\r\n            <CrossImageGraph data={this.getData()}/>\r\n            <div className={classes.root}>\r\n              <Slider\r\n                  classes = {\r\n                    {\r\n                      container: classes.slider,\r\n                      track: classes.thumb,\r\n                      thumb: classes.thumb\r\n                    }\r\n                  }\r\n                  min = {CrossImageSelectionOperation.MIN_RADIUS}\r\n                  max = {CrossImageSelectionOperation.MAX_RADIUS}\r\n                  step={1}\r\n                  value={this.state.radius}\r\n                  aria-labelledby=\"label\"\r\n                  onChange={this.onRadiusChanged}\r\n              />\r\n              <TextField\r\n                  style={{margin: \"15px\"}}\r\n                  value={this.state.radius}\r\n                  type=\"number\"\r\n                  margin=\"normal\"\r\n                  onChange={this.onRadiusTextChange}\r\n                  color=\"secondary\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <TextField\r\n                  style={{margin: \"15px\"}}\r\n                  label=\"X\"\r\n                  value={this.state.beginPoint.x}\r\n                  type=\"number\"\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  margin=\"normal\"\r\n                  onChange={this.onInsertionValueChanged('beginPoint', 'x')}\r\n              />\r\n              <TextField\r\n                  style={{margin: \"15px\"}}\r\n                  label=\"Y\"\r\n                  value={this.state.beginPoint.y}\r\n                  type=\"number\"\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  margin=\"normal\"\r\n                  onChange={this.onInsertionValueChanged('beginPoint', 'y')}\r\n              />\r\n            </div>\r\n            <div>\r\n              <TextField\r\n                  style={{margin: \"15px\"}}\r\n                  label=\"X\"\r\n                  value={this.state.endPoint.x}\r\n                  type=\"number\"\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  margin=\"normal\"\r\n                  onChange={this.onInsertionValueChanged('endPoint', 'x')}\r\n              />\r\n              <TextField\r\n                  style={{margin: \"15px\"}}\r\n                  label=\"Y\"\r\n                  value={this.state.endPoint.y}\r\n                  type=\"number\"\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  margin=\"normal\"\r\n                  onChange={this.onInsertionValueChanged('endPoint', 'y')}\r\n              />\r\n            </div>\r\n            <Button\r\n                style={{margin: \"10px\"}}\r\n                variant=\"extendedFab\"\r\n                color=\"secondary\"\r\n                onClick={this.applyOperation}>\r\n              Visualize\r\n            </Button>\r\n          </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(CrossImageSelection);\r\n","import ProcessImage from '../../../image/ProcessImage';\r\n\r\nclass ImageQuantizer {\r\n  static quantizeImage = (image, bits) => {\r\n    let numberOfLevels = Math.pow(2, bits) - 1;\r\n\r\n    for (let row = 0; row < image.getHeight(); row++) {\r\n      for (let col = 0; col < image.getWidth(); col++) {\r\n        let color = image.getBrightness(col, row);\r\n        let newScaleColor = Math.round((numberOfLevels * color) / (ProcessImage.MAX_PIXEL_VALUE - 1));\r\n        let originalScaleColor = Math.floor((newScaleColor * (ProcessImage.MAX_PIXEL_VALUE - 1)) / numberOfLevels);\r\n        image.setBrightness(col, row, originalScaleColor);\r\n       }\r\n     }\r\n  }\r\n};\r\n\r\nexport default ImageQuantizer;\r\n","import ProcessImage from '../../../image/ProcessImage';\r\n\r\nclass ImageResampler {\r\n  static MAX_VALUE = 5\r\n  static MIN_VALUE = 1;\r\n\r\n  static resample = (image, rows, cols) => {\r\n    let prevY = 0;\r\n\r\n    for(let y = 0; y < image.getHeight(); y++) {\r\n      for(let x = 0; x < image.getWidth(); x++) {\r\n\r\n        if(x % rows == 0 && y % cols == 0) {\r\n          let prevValues = [];\r\n\r\n          for(let i = x; i < x + rows; i++) {\r\n            for(let j = y; j < y + cols; j++){\r\n              if(i < image.getWidth() && j < image.getHeight()){\r\n                let rgbcolor = image.getRGBAComponents(i, j);\r\n                prevValues.push({i, j, rgbcolor});\r\n              }\r\n            }\r\n          }\r\n          let meansColors = {r: 0, g: 0, b:0, a:0};\r\n\r\n          for(let k = 0; k < prevValues.length; k++){\r\n           meansColors.r += prevValues[k].rgbcolor.r;\r\n           meansColors.g += prevValues[k].rgbcolor.g;\r\n           meansColors.b += prevValues[k].rgbcolor.b;\r\n           meansColors.a += prevValues[k].rgbcolor.a;\r\n         }\r\n\r\n         meansColors = Object.values(meansColors).map(\r\n           (value) => { return value / (rows * cols) }\r\n         );\r\n\r\n         for(let k = 0; k < prevValues.length; k++)\r\n            image.setRGBAComponets(prevValues[k].i, prevValues[k].j, meansColors[0], meansColors[1], meansColors[2], meansColors[3])\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n};\r\n\r\nexport default ImageResampler;\r\n","import React, {Component} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/es/Divider/Divider';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/lab/Slider/Slider';\r\nimport TextField from '@material-ui/core/TextField/TextField';\r\nimport Theme from '../../../../theme';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport BlackAndWhiteOperation from '../../../../../processor/operations/point/lineal/BlackAndWhite';\r\nimport ImageQuantizer from '../../../../../processor/operations/point/non-lineal/ImageQuantizer';\r\nimport ImageResampler from '../../../../../processor/operations/point/non-lineal/ImageResampler';\r\nimport ProcessImage from '../../../../../processor/image/ProcessImage';\r\n\r\nconst styles = {\r\n  root: {\r\n    width: 400,\r\n    display: \"flex\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n    alignContent: \"space-between\",\r\n    margin: \"auto\"\r\n  },\r\n  slider: {\r\n    padding: '22px 0px',\r\n    margin: 'auto',\r\n\r\n  },\r\n  thumb: {\r\n    background: Theme.palette.secondary.main\r\n  },\r\n  formControl: {\r\n    margin: Theme.spacing.unit,\r\n    minWidth: 120,\r\n  },\r\n};\r\n\r\nclass ImageQuantization extends Component {\r\n  state = {\r\n    quantizationLevel: 8,\r\n    resampleRows: 1,\r\n    resampleCols: 1,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  applyOperation = () => {\r\n    let {controller} = this.props;\r\n\r\n    if (controller.isAnyImageSelected()) {\r\n      controller.getSelectedImage().createNewState();\r\n      controller.getSelectedImage().setNextState();\r\n\r\n      ImageResampler.resample(controller.getSelectedImage(), this.state.resampleRows, this.state.resampleCols);\r\n      ImageQuantizer.quantizeImage(controller.getSelectedImage(), this.state.quantizationLevel);\r\n\r\n      controller.updateImageHistogram();\r\n      controller.updateImageCanvas();\r\n      controller.updateMethod();\r\n    }\r\n  };\r\n\r\n  onQuantizationLevelChange = (event, value) => {\r\n    this.setState({quantizationLevel: value});\r\n  };\r\n\r\n  onQuantizationLevelTextChange = event => {\r\n    let value = Number.parseInt(event.target.value);\r\n    if (value > ProcessImage.MIN_PIXEL_VALUE && value <= Math.log2(ProcessImage.MAX_PIXEL_VALUE)){\r\n      this.setState({quantizationLevel: value});\r\n    }\r\n  };\r\n\r\n  onResampleSizeChange = event => {\r\n    let value = Number.parseInt(event.target.value);\r\n    let selectedImage = this.props.controller.getSelectedImage();\r\n\r\n    if (value > 0 && value <= Math.min(selectedImage.getWidth(), selectedImage.getHeight())){\r\n      this.setState({[event.target.name]: value});\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { controller } = this.props;\r\n    return(\r\n      <div>\r\n        <div style={{width: '180px', margin: 'auto'}}>\r\n          <Slider\r\n          classes={\r\n            { container: classes.slider,\r\n              track: classes.thumb,\r\n              thumb: classes.thumb}\r\n          }\r\n          value={this.state.quantizationLevel}\r\n          min={ProcessImage.MIN_PIXEL_VALUE + 1}\r\n          max={Math.log2(ProcessImage.MAX_PIXEL_VALUE)}\r\n          step={1}\r\n          onChange={this.onQuantizationLevelChange}\r\n        />\r\n          <TextField\r\n              style={{margin: \"15px\"}}\r\n              value={this.state.quantizationLevel}\r\n              type=\"number\"\r\n              InputProps={{\r\n                endAdornment: <InputAdornment position=\"start\">bits</InputAdornment>,\r\n              }}\r\n              onChange={this.onQuantizationLevelTextChange}\r\n              color=\"secondary\"\r\n          />\r\n          <TextField\r\n              name = \"resampleRows\"\r\n              style={{margin: \"15px\"}}\r\n              value={this.state.resampleRows}\r\n              type=\"number\"\r\n              InputProps={{\r\n                endAdornment: <InputAdornment position=\"start\">rows</InputAdornment>,\r\n              }}\r\n              onChange={this.onResampleSizeChange}\r\n              color=\"secondary\"\r\n          />\r\n          <TextField\r\n              name = \"resampleCols\"\r\n              style={{margin: \"15px\"}}\r\n              value={this.state.resampleCols}\r\n              type=\"number\"\r\n              InputProps={{\r\n                endAdornment: <InputAdornment position=\"start\">columns</InputAdornment>,\r\n              }}\r\n              onChange={this.onResampleSizeChange}\r\n              color=\"secondary\"\r\n          />\r\n          <Button\r\n              style={{margin: \"10px\"}}\r\n              variant=\"extendedFab\"\r\n              color=\"secondary\"\r\n              onClick={this.applyOperation}>\r\n            Apply quantization\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nImageQuantization.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(ImageQuantization);\r\n","import ProcessImage from '../../image/ProcessImage';\r\n\r\nclass VerticalTransformProcessor {\r\n\r\n  static applyGeometricChange = (image) => {\r\n    let originalImage = new ProcessImage(image.getTitle(), image.getWidth(), image.getHeight(), image.getImageData().data);\r\n\r\n    for(let i = 0; i < originalImage.getHeight()-1; i++){\r\n      for(let j = 0; j < originalImage.getWidth()-1; j++){\r\n        let rgbaComponent = originalImage.getRGBAComponents(j, i);\r\n        image.setRGBAComponets(j, (originalImage.getHeight()-1)-i, rgbaComponent.r, rgbaComponent.g, rgbaComponent.b, rgbaComponent.a)\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default VerticalTransformProcessor;\r\n","import ProcessImage from '../../image/ProcessImage';\r\n\r\nclass HorizontalTransformProcessor {\r\n\r\n  static applyGeometricChange = (image) => {\r\n    let originalImage = new ProcessImage(image.getTitle(), image.getWidth(), image.getHeight(), image.getImageData().data);\r\n\r\n    for(let i = 0; i < originalImage.getHeight()-1; i++){\r\n      for(let j = 0; j < originalImage.getWidth()-1; j++){\r\n        let rgbaComponent = originalImage.getRGBAComponents(j, i);\r\n        image.setRGBAComponets((originalImage.getWidth()-1)-j, i, rgbaComponent.r, rgbaComponent.g, rgbaComponent.b, rgbaComponent.a)\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default HorizontalTransformProcessor;\r\n","import React, {Component} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/es/Divider/Divider';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport VerticalProcessor from '../../../../processor/operations/geometric/VerticalFlipProcessor';\r\nimport HorizontalProcessor from '../../../../processor/operations/geometric/HorizontalFlipProcessor';\r\n\r\nconst styles = theme => ({\r\n  formControl: {\r\n    margin: theme.spacing.unit,\r\n    width: 100,\r\n  },\r\n\r\n  button: {\r\n    margin: theme.spacing.unit\r\n  }\r\n});\r\n\r\nclass ImageFlipper extends Component {\r\n  state = {\r\n    flipType: \"\",\r\n    labelWidth: 0,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  applyOperation = () => {\r\n    let {controller} = this.props;\r\n\r\n    controller.getSelectedImage().createNewState();\r\n    controller.getSelectedImage().setNextState();\r\n\r\n    if(this.state.flipType === \"vertical\") {\r\n      VerticalProcessor.applyGeometricChange(controller.getSelectedImage());\r\n    } else {\r\n      HorizontalProcessor.applyGeometricChange(controller.getSelectedImage());\r\n    }\r\n\r\n    controller.updateImageHistogram();\r\n    controller.updateImageCanvas();\r\n    controller.updateMethod();\r\n  };\r\n\r\n  handleFormChange= event => {\r\n   this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return(\r\n      <div>\r\n      <FormControl variant=\"outlined\" className={classes.formControl}>\r\n          <InputLabel\r\n            ref={ref => {\r\n              this.InputLabelRef = ref;\r\n            }}\r\n            htmlFor=\"outlined-flipType-simple\"\r\n          >\r\n            Flyp type\r\n          </InputLabel>\r\n          <Select\r\n            value={this.state.flipType}\r\n            onChange={this.handleFormChange}\r\n            input={\r\n              <OutlinedInput\r\n                labelWidth={this.state.labelWidth}\r\n                name=\"flipType\"\r\n                id=\"outlined-flipType-simple\"\r\n              />\r\n            }\r\n          >\r\n          <MenuItem key=\"horizontal\" value=\"horizontal\">Horizontal</MenuItem>\r\n          <MenuItem key=\"vertical\" value=\"vertical\">Vertical</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n        <Button\r\n            variant=\"fab\"\r\n            color=\"secondary\"\r\n            aria-label=\"Add\"\r\n            onClick={this.applyOperation}>\r\n          <AddIcon />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nImageFlipper.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(ImageFlipper);\r\n","import ProcessImage from '../../image/ProcessImage';\r\n\r\nclass TransposedProcessor {\r\n  static applyGeometricChange = (image) => {\r\n    let newImageData = [];\r\n    let index = 0;\r\n\r\n    for(let i = 0; i < image.getHeight(); i++){\r\n      for(let j = 0; j < image.getWidth(); j++, index += image.getHeight() * 4){\r\n        let rgbaComponent = image.getRGBAComponents(j, i);\r\n        newImageData[index] = rgbaComponent.r;\r\n        newImageData[index+1] = rgbaComponent.g;\r\n        newImageData[index+2] = rgbaComponent.b;\r\n        newImageData[index+3] = rgbaComponent.a;\r\n      }\r\n       index = 4 * (i+1);\r\n    }\r\n\r\n    image.setNewState(Uint8ClampedArray.from(newImageData), image.getHeight(), image.getWidth());\r\n    image.setNextState();\r\n  };\r\n}\r\n\r\nexport default TransposedProcessor;\r\n","import React, {Component} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ErrorHandler from '../../error/ErrorHandler';\r\nimport TransposedProcessor from '../../../../processor/operations/geometric/TransposedProcessor';\r\n\r\n class TransposedImage extends Component {\r\n   state = {\r\n     error: false,\r\n     errorMsg: \"error\",\r\n   };\r\n\r\n   handleError = (msg) => {\r\n     this.setState({error: true, errorMsg: msg})\r\n   };\r\n\r\n   closeError = (msg) => {\r\n     this.setState({error: false})\r\n   };\r\n\r\n   applyOperation = () => {\r\n       let selectedImage = this.props.controller.getSelectedImage();\r\n\r\n       TransposedProcessor.applyGeometricChange(selectedImage);\r\n\r\n       this.props.controller.updateImageHistogram();\r\n       this.props.controller.updateImageCanvas();\r\n       this.props.controller.updateMethod();\r\n\r\n  };\r\n\r\n   render() {\r\n    return(\r\n      <div>\r\n      <div>\r\n        <Button\r\n            variant=\"fab\"\r\n            color=\"secondary\"\r\n            aria-label=\"Add\"\r\n            onClick={this.applyOperation}>\r\n          <AddIcon />\r\n        </Button>\r\n        </div>\r\n        <ErrorHandler\r\n            open={this.state.error}\r\n            errorMsg={this.state.errorMsg}\r\n            handler={this.closeError}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n export default TransposedImage;\r\n","\r\nclass Scaling {\r\n  verticalFactor;\r\n  horizontalFactor;\r\n  static FACTOR_MIN = 0.1;\r\n  static FACTOR_MAX = 4.0;\r\n\r\n  constructor(horizontalFactor, verticalFactor) {\r\n    this.setVerticalFactor(verticalFactor);\r\n    this.setHorizontalFactor(horizontalFactor);\r\n  }\r\n\r\n  perform = (image, interpolator) => {\r\n    let newWidth = Math.round(this.horizontalFactor * image.getWidth());\r\n    let newHeight = Math.round(this.verticalFactor * image.getHeight());\r\n    image.createNewBlankState(newWidth, newHeight);\r\n    image.setNextState();\r\n    for (let i = 1; i < image.getWidth() - 1; i++) {\r\n      for (let j = 1; j < image.getHeight() - 1; j++) {\r\n        let position = {\r\n          x: i / this.horizontalFactor,\r\n          y: j / this.verticalFactor,\r\n        };\r\n        image.setPreviousState();\r\n        let interpolatedColor = interpolator.interpolateColor(image, position);\r\n        image.setNextState();\r\n        image.setBrightness(i, j, interpolatedColor);\r\n        image.setAlphaComponent(i, j, 255);\r\n      }\r\n    }\r\n    image.setNextState();\r\n  };\r\n\r\n  setVerticalFactorFromWidth = (oldWidth, newWidth) => {\r\n    this.setVerticalFactor(newWidth / oldWidth);\r\n  };\r\n\r\n  setHoorizontalFactorFromHeight = (oldHeight, newHeight) => {\r\n    this.setHorizontalFactor(newHeight / oldHeight);\r\n  };\r\n\r\n  setFactor = factor => {\r\n    this.setVerticalFactor(factor);\r\n    this.setHorizontalFactor(factor);\r\n  };\r\n\r\n  setVerticalFactor = verticalFactor => {\r\n    if (Scaling.factorIsValid(verticalFactor))\r\n      this.verticalFactor = verticalFactor;\r\n  };\r\n\r\n  setHorizontalFactor = horizontalFactor => {\r\n    if (Scaling.factorIsValid(horizontalFactor))\r\n      this.horizontalFactor = horizontalFactor;\r\n  };\r\n\r\n  static factorIsValid = (factor) => {\r\n    return factor !== undefined\r\n        && factor >= Scaling.FACTOR_MIN\r\n        && factor <= Scaling.FACTOR_MAX;\r\n  };\r\n}\r\n\r\nexport default Scaling;","\r\n\r\nclass Interpolator {\r\n  static OVER_LIMITS_COLOR = 0;\r\n\r\n  getNeighbourhood = (image, position) => {\r\n    let X = Math.floor(position.x);\r\n    let Y = Math.floor(position.y);\r\n    return {\r\n      A: this.getNeighbour(image, X, Y),\r\n      B: this.getNeighbour(image, X + 1, Y),\r\n      C: this.getNeighbour(image, X, Y + 1),\r\n      D: this.getNeighbour(image, X + 1, Y + 1),\r\n    };\r\n  };\r\n\r\n  getNeighbour = (image, x, y) => {\r\n    let color;\r\n    if (this.isInBounds(image, x, y)) {\r\n      color = image.getBrightness(x, y);\r\n    } else {\r\n      color = Interpolator.OVER_LIMITS_COLOR;\r\n    }\r\n    return {\r\n      x: x,\r\n      y: y,\r\n      color: color,\r\n    };\r\n  };\r\n\r\n  isInBounds(image, x, y) {\r\n    return x >= 0 && x < image.getWidth()\r\n        && y >= 0 && y < image.getHeight();\r\n  };\r\n}\r\n\r\nexport default Interpolator;","\r\nimport Interpolator from './Interpolator';\r\n\r\nclass NearestNeighbourInterpolator extends Interpolator {\r\n  interpolateColor = (image, position) => {\r\n    let bound = this.getPositionBound(image, position);\r\n    let neighbourhood = this.getNeighbourhood(image, position);\r\n    let keys = Object.keys(neighbourhood);\r\n    let nearestNeighbourKey;\r\n    for (let k = 0; k < keys.length; k++) {\r\n      let neighbour = neighbourhood[keys[k]];\r\n      if (neighbour.x === bound.x\r\n          && neighbour.y === bound.y) {\r\n        nearestNeighbourKey = keys[k];\r\n      }\r\n    }\r\n    return neighbourhood[nearestNeighbourKey].color;\r\n  };\r\n\r\n  getPositionBound = (image, position) => {\r\n    let x = Math.round(position.x);\r\n    let y = Math.round(position.y);\r\n    return {\r\n      x: x < image.getWidth() ? x : x - 1,\r\n      y: y < image.getHeight() ? y : y - 1,\r\n    };\r\n  }\r\n}\r\n\r\nexport default NearestNeighbourInterpolator;","import Interpolator from './Interpolator';\r\nimport ProcessImage from '../../../image/ProcessImage';\r\nlet counter = 0;\r\nclass BilinealInterpolator extends Interpolator {\r\n  interpolateColor = (image, position) => {\r\n    let neighbourhood = this.getNeighbourhood(image, position);\r\n    let X = Math.floor(position.x);\r\n    let Y = Math.floor(position.y);\r\n    let p = position.x - X;\r\n    let q = position.y - Y;\r\n    let A = neighbourhood.A.color;\r\n    let B = neighbourhood.B.color;\r\n    let C = neighbourhood.C.color;\r\n    let D = neighbourhood.D.color;\r\n    let P = (A + D - B - C) * p * q\r\n          + (C - A) * q\r\n          + (B - A) * p\r\n          + A;\r\n    return this.clampResult(P);\r\n  };\r\n\r\n  clampResult = value => {\r\n    let result = Math.round(value);\r\n    if (result < ProcessImage.MIN_PIXEL_VALUE) {\r\n      result = ProcessImage.MIN_PIXEL_VALUE;\r\n    }\r\n    if (result >= ProcessImage.MAX_PIXEL_VALUE) {\r\n      result = ProcessImage.MAX_PIXEL_VALUE - 1;\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default BilinealInterpolator;","import React, {Component} from 'react';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Slider from '@material-ui/lab/Slider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport ScalingOperation from '../../../../processor/operations/geometric/Scaling';\r\nimport Theme from '../../../theme';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport NearestNeighbourInterpolator\r\n  from '../../../../processor/operations/geometric/interpolator/NearestNeighbourInterpolator';\r\nimport BilinealInterpolator\r\n  from '../../../../processor/operations/geometric/interpolator/BilinealInterpolator';\r\n\r\nconst styles = {\r\n  root: {\r\n    width: 400,\r\n    display: \"flex\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n    alignContent: \"space-between\",\r\n    margin: \"auto\"\r\n  },\r\n  slider: {\r\n    width: '180px',\r\n    margin: 'auto',\r\n  },\r\n  thumb: {\r\n    background: Theme.palette.secondary.main\r\n  },\r\n  formControl: {\r\n    margin: Theme.spacing.unit,\r\n    minWidth: 120,\r\n  },\r\n};\r\n\r\nconst interpolators = {\r\n  nearestNeighbour: new NearestNeighbourInterpolator(),\r\n  bilineal: new BilinealInterpolator(),\r\n};\r\n\r\nclass Scaling extends Component {\r\n  interpolatorsText = ['nearestNeighbour', 'bilineal'];\r\n\r\n  state = {\r\n    xFactor: ScalingOperation.FACTOR_MIN,\r\n    yFactor: ScalingOperation.FACTOR_MIN,\r\n    selectedInterpolator: this.interpolatorsText[0]\r\n  };\r\n\r\n  getSelectedInterpolator = () => {\r\n    return interpolators[this.state.selectedInterpolator];\r\n  };\r\n\r\n  applyOperation = () => {\r\n    let {controller} = this.props;\r\n    if (controller.isAnyImageSelected()) {\r\n      let image = controller.getSelectedImage();\r\n      let interpolator = this.getSelectedInterpolator();\r\n      let factor = this.getFactor();\r\n      let scaling =\r\n          new ScalingOperation(factor.x, factor.y);\r\n      scaling.perform(image, interpolator);\r\n      image.setNextState();\r\n\r\n      controller.updateImageHistogram();\r\n      controller.updateImageCanvas();\r\n      controller.resetActionMethod(undefined);\r\n      controller.updateMethod();\r\n    }\r\n  };\r\n\r\n  getFactor = () => {\r\n    return {\r\n      x: this.state.xFactor,\r\n      y: this.state.yFactor,\r\n    }\r\n  };\r\n\r\n  onFactorChanged = name => (event, value) => {\r\n    this.setState({[name]: value});\r\n  };\r\n\r\n  onFactorTextChanged = name => event => {\r\n    let factor = Number.parseFloat(event.target.value);\r\n    if (ScalingOperation.factorIsValid(factor)) {\r\n      this.setState({[name]: factor});\r\n    }\r\n  };\r\n\r\n  onInterpolatorSelected = event => {\r\n    this.setState({selectedInterpolator: event.target.value})\r\n  };\r\n\r\n  render() {\r\n    const {classes} = this.props;\r\n    return(\r\n        <div>\r\n          <FormControl className={classes.formControl}>\r\n            <Select\r\n                value={this.state.selectedInterpolator}\r\n                onChange={this.onInterpolatorSelected}\r\n                autoWidth\r\n            >\r\n              {this.interpolatorsText.map(interpolatorName => {\r\n                return <MenuItem\r\n                    key={interpolatorName}\r\n                    value={interpolatorName}>{interpolatorName}</MenuItem>;\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n          <div className={classes.root}>\r\n            <Typography variant=\"caption\" style={{margin: 10}}>Horizontal factor</Typography>\r\n            <Slider\r\n                classes={\r\n                  { container: classes.slider,\r\n                    track: classes.thumb,\r\n                    thumb: classes.thumb}\r\n                }\r\n                min = {ScalingOperation.FACTOR_MIN}\r\n                max = {ScalingOperation.FACTOR_MAX}\r\n                value={this.state.xFactor}\r\n                aria-labelledby=\"label\"\r\n                onChange={this.onFactorChanged('xFactor')}\r\n            />\r\n            <TextField\r\n                style={{margin: \"15px\"}}\r\n                value={this.state.xFactor}\r\n                type=\"number\"\r\n                margin=\"normal\"\r\n                onChange={this.onFactorTextChanged('xFactor')}\r\n                color=\"secondary\"\r\n            />\r\n          </div>\r\n          <div className={classes.root}>\r\n            <Typography variant=\"caption\" style={{margin: 10}}>Vertical factor</Typography>\r\n            <Slider\r\n                classes={\r\n                  { container: classes.slider,\r\n                    track: classes.thumb,\r\n                    thumb: classes.thumb}\r\n                }\r\n                min = {ScalingOperation.FACTOR_MIN}\r\n                max = {ScalingOperation.FACTOR_MAX}\r\n                value={this.state.yFactor}\r\n                aria-labelledby=\"label\"\r\n                onChange={this.onFactorChanged('yFactor')}\r\n            />\r\n            <TextField\r\n                style={{margin: \"15px\"}}\r\n                value={this.state.yFactor}\r\n                type=\"number\"\r\n                margin=\"normal\"\r\n                onChange={this.onFactorTextChanged('yFactor')}\r\n                color=\"secondary\"\r\n            />\r\n          </div>\r\n          <Button\r\n              style={{margin: \"10px\"}}\r\n              variant=\"extendedFab\"\r\n              color=\"secondary\"\r\n              onClick={this.applyOperation}>\r\n            Apply Scaling\r\n          </Button>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Scaling);\r\n","import ProcessImage from '../../image/ProcessImage';\r\n\r\nclass ImageRotation {\r\n  static applyGeometricChange = (image, degrees) => {\r\n    let times = degrees / 360 * 4 - parseInt(degrees / 360, 10) * 4;\r\n    let newImage = new ProcessImage(image.getTitle(), image.getWidth(), image.getHeight(), image.getImageData().data);\r\n    let newImageData = [];\r\n\r\n    for(; times > 0; times--){\r\n      for(let i = newImage.getWidth()-1; i >= 0; i--){\r\n        for(let j = 0; j < newImage.getHeight(); j++){\r\n          let rgbaComponent = newImage.getRGBAComponents(i, j);\r\n          newImageData.push(rgbaComponent.r)\r\n          newImageData.push(rgbaComponent.g)\r\n          newImageData.push(rgbaComponent.b)\r\n          newImageData.push(rgbaComponent.a)\r\n        }\r\n      }\r\n      newImage = ImageRotation.newImage(newImage, newImageData);\r\n      newImageData = [];\r\n    }\r\n\r\n    image.setNewState(Uint8ClampedArray.from(newImage.getImageData().data), newImage.getWidth(), newImage.getHeight());\r\n    image.setNextState();\r\n  };\r\n\r\n  static newImage = (newImage, newImageData) => {\r\n      return new ProcessImage(newImage.getTitle(), newImage.getHeight(), newImage.getWidth(), Uint8ClampedArray.from(newImageData));\r\n  };\r\n}\r\nexport default ImageRotation;\r\n","import React, {Component} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/es/Divider/Divider';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport ImageRotation from '../../../../processor/operations/geometric/ImageRotation';\r\n\r\nconst styles = theme => ({\r\n  formControl: {\r\n    margin: theme.spacing.unit,\r\n    width: 100,\r\n  },\r\n\r\n  button: {\r\n    margin: theme.spacing.unit\r\n  }\r\n});\r\n\r\nclass RotateImage extends Component {\r\n  state = {\r\n    rotationDegrees: \"\",\r\n    labelWidth: 0,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  applyOperation = () => {\r\n    let selectedImage = this.props.controller.getSelectedImage();\r\n\r\n    ImageRotation.applyGeometricChange(selectedImage, this.state.rotationDegrees);\r\n    this.props.controller.updateImageHistogram();\r\n    this.props.controller.updateImageCanvas();\r\n    this.props.controller.updateMethod();\r\n  };\r\n\r\n  handleFormChange= event => {\r\n   this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return(\r\n      <div>\r\n      <FormControl variant=\"outlined\" className={classes.formControl}>\r\n          <InputLabel\r\n            ref={ref => {\r\n              this.InputLabelRef = ref;\r\n            }}\r\n            htmlFor=\"outlined-rotationDegrees-simple\"\r\n          >\r\n            Degrees\r\n          </InputLabel>\r\n          <Select\r\n            value={this.state.rotationDegrees}\r\n            onChange={this.handleFormChange}\r\n            input={\r\n              <OutlinedInput\r\n                labelWidth={this.state.labelWidth}\r\n                name=\"rotationDegrees\"\r\n                id=\"outlined-rotationDegrees-simple\"\r\n              />\r\n            }\r\n          >\r\n          <MenuItem key=\"0\" value=\"0\">0º</MenuItem>\r\n          <MenuItem key=\"90\" value=\"90\">90º</MenuItem>\r\n          <MenuItem key=\"180\" value=\"180\">180º</MenuItem>\r\n          <MenuItem key=\"270\" value=\"270\">270º</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n        <Button\r\n            variant=\"fab\"\r\n            color=\"secondary\"\r\n            aria-label=\"Add\"\r\n            onClick={this.applyOperation}>\r\n          <AddIcon />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRotateImage.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(RotateImage);\r\n","\r\nclass Rotation {\r\n  static MIN_ANGLE = -360.0;\r\n  static MAX_ANGLE = 360.0;\r\n\r\n  createNewImageState = (image, angle) => {\r\n    let size = this.getNewImageWidthAndHeight(image, angle);\r\n    image.createNewBlankState(size.width, size.height);\r\n  };\r\n\r\n  getImageCorners = (image) => {\r\n    let maxWidth = image.getWidth() - 1;\r\n    let maxHeight = image.getHeight() - 1;\r\n    return {\r\n      topLeft:     {x: 0, y: 0},\r\n      topRight:    {x: maxWidth, y: 0},\r\n      bottomLeft:  {x: 0, y: maxHeight},\r\n      bottomRight: {x: maxWidth, y: maxHeight}\r\n    }\r\n  };\r\n\r\n  getRotatedImageCorners = (image, angle) => {\r\n    let corners = this.getImageCorners(image);\r\n    let rotatedCorners = {};\r\n    let keys = Object.keys(corners);\r\n    for (let k = 0; k < keys.length; k++) {\r\n      let key = keys[k];\r\n      rotatedCorners[key] = this.getRotationPosition(angle, corners[key]);\r\n    }\r\n    return rotatedCorners;\r\n  };\r\n\r\n  getNewImageWidthAndHeight = (image, angle) => {\r\n    let corners = this.getRotatedImageCorners(image, angle);\r\n    let minMax = this.getMinMaxCorners(corners);\r\n    return {\r\n      width: Math.round(Math.abs(minMax.max.x - minMax.min.x)),\r\n      height: Math.round(Math.abs(minMax.max.y - minMax.min.y)),\r\n    };\r\n  };\r\n\r\n  getMinMaxCorners = (corners) => {\r\n    let xCoordinates = [];\r\n    let yCoordinates = [];\r\n    let keys = Object.keys(corners);\r\n    for (let k = 0; k < keys.length; k++) {\r\n      let key = keys[k];\r\n      xCoordinates.push(corners[key].x);\r\n      yCoordinates.push(corners[key].y);\r\n    }\r\n    return {\r\n      min: {\r\n        x: Math.min(...xCoordinates),\r\n        y: Math.min(...yCoordinates),\r\n      },\r\n      max: {\r\n        x: Math.max(...xCoordinates),\r\n        y: Math.max(...yCoordinates),\r\n      }\r\n    }\r\n  };\r\n\r\n  getRotationPosition = (angle, position) => {\r\n    const {x, y} = position;\r\n    let radAngle = angle * Math.PI / 180;\r\n    return {\r\n      x: x * Math.cos(radAngle) + y * Math.sin(radAngle),\r\n      y: - x * Math.sin(radAngle) + y * Math.cos(radAngle),\r\n    }\r\n  };\r\n\r\n  getDirectPosition = (angle, position, minMax) => {\r\n    let {x, y} = this.getRotationPosition(angle, position);\r\n    return {\r\n      x: x + Math.abs(minMax.min.x),\r\n      y: y + Math.abs(minMax.min.y),\r\n    };\r\n  };\r\n\r\n  getInversePosition = (angle, position, minMax) => {\r\n    let {x, y} = position;\r\n    let minX = Math.abs(minMax.min.x);\r\n    let minY = Math.abs(minMax.min.y);\r\n    let radAngle = angle * Math.PI / 180;\r\n    return {\r\n      x: (x - minX) * Math.cos(radAngle) + (minY - y) * Math.sin(radAngle),\r\n      y: (x - minX) * Math.sin(radAngle) + (y - minY) * Math.cos(radAngle),\r\n    }\r\n  };\r\n\r\n  static angleIsValid(angle) {\r\n    return angle >= Rotation.MIN_ANGLE\r\n        && angle <= Rotation.MAX_ANGLE;\r\n  }\r\n\r\n  clampIndexes = (image, position) => {\r\n    let keys = Object.keys(position);\r\n    for (let k = 0; k < keys.length; k++) {\r\n      let key = keys[k];\r\n      position[key] = Math.round(position[key]);\r\n      if (position[key] < 0) {\r\n        position[key] = 0;\r\n      }\r\n    }\r\n    if (position.x >= image.getWidth()) {\r\n      position.x = image.getWidth() - 1;\r\n    }\r\n    if (position.y >= image.getHeight()) {\r\n      position.y = image.getHeight() - 1;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Rotation;","import Rotation from './Rotation';\r\n\r\nclass RawRotation extends Rotation {\r\n  perform = (image, angle) => {\r\n    let corners = this.getRotatedImageCorners(image, angle);\r\n    let minMax = this.getMinMaxCorners(corners);\r\n    this.createNewImageState(image, angle);\r\n    for (let i = 0; i < image.getWidth(); i++) {\r\n      for (let j = 0; j < image.getHeight(); j++) {\r\n        let color = image.getBrightness(i, j);\r\n        let position = this.getDirectPosition(angle, {x: i, y: j}, minMax);\r\n        image.setNextState();\r\n        this.clampIndexes(image, position);\r\n        image.setBrightness(position.x, position.y, color);\r\n        image.setAlphaComponent(position.x, position.y, 255);\r\n        image.setPreviousState();\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default RawRotation;","import Rotation from './Rotation';\r\n\r\nclass InterpolatedRotation extends Rotation {\r\n  perform = (image, angle, interpolator) => {\r\n    let corners = this.getRotatedImageCorners(image, angle);\r\n    let minMax = this.getMinMaxCorners(corners);\r\n    this.createNewImageState(image, angle);\r\n    image.setNextState();\r\n    for (let i = 0; i < image.getWidth(); i++) {\r\n      for (let j = 0; j < image.getHeight(); j++) {\r\n        let position = this.getInversePosition(angle, {x: i, y: j}, minMax);\r\n        image.setPreviousState();\r\n        if (this.positionIsValid(position, image)) {\r\n          let color = interpolator.interpolateColor(image, position);\r\n          image.setNextState();\r\n          image.setBrightness(i, j, color);\r\n          image.setAlphaComponent(i, j, 255);\r\n        }\r\n        image.setNextState();\r\n      }\r\n    }\r\n  };\r\n\r\n  positionIsValid = (position, image) => {\r\n    return position.x >= 0 && position.x < image.getWidth()\r\n        && position.y >= 0 && position.y < image.getHeight();\r\n  }\r\n}\r\n\r\nexport default InterpolatedRotation;","import React, {Component} from 'react';\r\nimport RotationOperation from '../../../../processor/operations/geometric/rotation/Rotation';\r\nimport RawRotation from '../../../../processor/operations/geometric/rotation/RawRotation';\r\nimport InterpolatedRotation from '../../../../processor/operations/geometric/rotation/InterpolatedRotation';\r\nimport NearestNeighbourInterpolator\r\n  from '../../../../processor/operations/geometric/interpolator/NearestNeighbourInterpolator';\r\nimport BilinealInterpolator\r\n  from '../../../../processor/operations/geometric/interpolator/BilinealInterpolator';\r\nimport Icon from '@material-ui/core/Icon/Icon';\r\nimport Typography from '@material-ui/core/Typography/Typography';\r\nimport Divider from '@material-ui/core/Divider/Divider';\r\nimport Slider from '@material-ui/lab/Slider/Slider';\r\nimport TextField from '@material-ui/core/TextField/TextField';\r\nimport Theme from '../../../theme';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button/Button';\r\nimport Select from '@material-ui/core/Select/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl/FormControl';\r\n\r\nconst styles = {\r\n  root: {\r\n    width: 400,\r\n    display: \"flex\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n    alignContent: \"space-between\",\r\n    margin: \"auto\"\r\n  },\r\n  slider: {\r\n    width: '180px',\r\n    margin: 'auto',\r\n  },\r\n  thumb: {\r\n    background: Theme.palette.secondary.main\r\n  },\r\n  formControl: {\r\n    margin: Theme.spacing.unit,\r\n    minWidth: 120,\r\n  },\r\n};\r\n\r\nconst MIDDLE_ANGLE = (RotationOperation.MAX_ANGLE + RotationOperation.MIN_ANGLE) / 2;\r\n\r\nclass Rotation extends Component {\r\n  interpolators = {\r\n    nearestNeighbour: new NearestNeighbourInterpolator(),\r\n    bilineal: new BilinealInterpolator(),\r\n  };\r\n\r\n  rotationMethods = {\r\n    raw: new RawRotation(),\r\n    interpolated: new InterpolatedRotation(),\r\n  };\r\n\r\n  state = {\r\n    angle: MIDDLE_ANGLE,\r\n    selectedInterpolator: Object.keys(this.interpolators)[0],\r\n    selectedRotationMethod: Object.keys(this.rotationMethods)[0],\r\n  };\r\n\r\n  applyOperation = () => {\r\n    let {controller} = this.props;\r\n    if (controller.isAnyImageSelected()) {\r\n      let image = controller.getSelectedImage();\r\n      let {angle} = this.state;\r\n      let rotation = this.getRotationMethod();\r\n      rotation.perform(image, angle, this.getInterpolator());\r\n      image.setNextState();\r\n\r\n      controller.updateImageHistogram();\r\n      controller.updateImageCanvas();\r\n      controller.resetActionMethod(undefined);\r\n      controller.updateMethod();\r\n    }\r\n  };\r\n\r\n  getRotationMethod = () => {\r\n    return this.rotationMethods[this.state.selectedRotationMethod];\r\n  };\r\n\r\n  getInterpolator = () => {\r\n    return this.interpolators[this.state.selectedInterpolator];\r\n  };\r\n\r\n  onAngleChanged = (event, value) => {\r\n    this.setState({angle: value});\r\n  };\r\n\r\n  onAngleTextChanged = event => {\r\n    let angle = Number.parseFloat(event.target.value);\r\n    if (RotationOperation.angleIsValid(angle)) {\r\n      this.setState({angle: angle});\r\n    }\r\n  };\r\n\r\n  onInterpolatorSelected = event => {\r\n    this.setState({selectedInterpolator: event.target.value})\r\n  };\r\n\r\n  onRotationMethodSelected = event => {\r\n    this.setState({selectedRotationMethod: event.target.value});\r\n  };\r\n\r\n  interpolatorSelectorDisabled = () => {\r\n    return this.state.selectedRotationMethod !== 'interpolated'\r\n  };\r\n\r\n  getHeader = () => {\r\n    return\r\n  }\r\n\r\n  render() {\r\n    let {classes} = this.props;\r\n    return(\r\n        <div>\r\n          <FormControl className={classes.formControl}>\r\n            <Select\r\n                value={this.state.selectedRotationMethod}\r\n                onChange={this.onRotationMethodSelected}\r\n                autoWidth\r\n            >\r\n              {Object.keys(this.rotationMethods).map(interpolatorName => {\r\n                return <MenuItem\r\n                    key={interpolatorName}\r\n                    value={interpolatorName}>{interpolatorName}</MenuItem>;\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n          <FormControl className={classes.formControl}>\r\n            <Select\r\n                value={this.state.selectedInterpolator}\r\n                onChange={this.onInterpolatorSelected}\r\n                disabled={this.interpolatorSelectorDisabled()}\r\n                autoWidth\r\n            >\r\n              {Object.keys(this.interpolators).map(rotationMethod => {\r\n                return <MenuItem\r\n                    key={rotationMethod}\r\n                    value={rotationMethod}>{rotationMethod}</MenuItem>;\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n          <div className={classes.root}>\r\n            <Typography variant=\"caption\" style={{margin: 10}}>Horizontal factor</Typography>\r\n            <Slider\r\n                classes={\r\n                  { container: classes.slider,\r\n                    track: classes.thumb,\r\n                    thumb: classes.thumb}\r\n                }\r\n                min = {RotationOperation.MIN_ANGLE}\r\n                max = {RotationOperation.MAX_ANGLE}\r\n                value={this.state.angle}\r\n                aria-labelledby=\"label\"\r\n                onChange={this.onAngleChanged}\r\n            />\r\n            <TextField\r\n                style={{margin: \"15px\"}}\r\n                value={this.state.angle}\r\n                type=\"number\"\r\n                margin=\"normal\"\r\n                onChange={this.onAngleTextChanged}\r\n                color=\"secondary\"\r\n            />\r\n          </div>\r\n          <Button\r\n              style={{margin: \"10px\"}}\r\n              variant=\"extendedFab\"\r\n              color=\"secondary\"\r\n              onClick={this.applyOperation}>\r\n            Apply Rotation\r\n          </Button>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Rotation);\r\n","import React from 'react';\r\nimport LoadImage from './LoadImageAction';\r\nimport SaveImage from './SaveImageAction';\r\n\r\n// Lineal point operations.\r\nimport BlackAndWhite from './point/lineal/BlackAndWhite';\r\nimport LinealPicewiseAdjustment from './point/lineal/LinealPicewiseAdjustment';\r\nimport BrightnessAndContrast from './point/lineal/BrightnessAndContrast';\r\n\r\n// Non lineal point operation.\r\nimport HistogramEqualization from './point/non-lineal/HistogramEqualization';\r\nimport HistogramSpecification from './point/non-lineal/HistogramSpecification';\r\nimport GammaCorrection from './point/non-lineal/GammaCorrection';\r\nimport ImageDifference from './point/non-lineal/ImageDifference';\r\nimport ChangesDetection from './point/non-lineal/ChangesDetection';\r\nimport CrossImageSelection from './point/non-lineal/cross-image/CrossImageSelection';\r\nimport ImageQuantization from './point/non-lineal/ImageQuantization';\r\n//Geometric operations\r\nimport ImageFlipper from './geometric/ImageFlipper';\r\nimport TransposedImage from './geometric/TransposedImage';\r\nimport Scaling from './geometric/Scaling';\r\nimport RotateImage from './geometric/RotateImage';\r\nimport Rotation from './geometric/Rotation';\r\n\r\n/**\r\n * Action picker object determines\r\n * witch action to display in any moment.\r\n *\r\n * @type {{load_img: (function(*): *)}}\r\n */\r\nlet actionPicker = {\r\n  load_img: controller => {return <LoadImage controller={controller}/>},\r\n  save_img: controller => {return <SaveImage controller={controller}/>},\r\n  black_white: controller => {return <BlackAndWhite controller={controller}/>},\r\n  lineal_adjustment: controller => {return <LinealPicewiseAdjustment controller={controller}/>},\r\n  brightness_contrast: controller => {return <BrightnessAndContrast controller={controller}/>},\r\n  histogram_equalization: controller => {return <HistogramEqualization controller={controller}/>},\r\n  histogram_specification: controller => {return <HistogramSpecification controller={controller}/>},\r\n  gamma_correction: controller => {return <GammaCorrection controller={controller}/>},\r\n  image_difference: controller => {return <ImageDifference controller={controller}/>},\r\n  changes_detection: controller => {return <ChangesDetection controller={controller}/>},\r\n  cross_image: controller => {return <CrossImageSelection controller={controller}/>},\r\n  image_flipper: controller => {return <ImageFlipper controller={controller}/>},\r\n  image_transpose: controller => {return <TransposedImage controller={controller}/>},\r\n  scale_image: controller => {return <Scaling controller={controller}/>},\r\n  rotate_image: controller => {return <RotateImage controller={controller}/>},\r\n  rotation: controller => {return <Rotation controller={controller}/>},\r\n  image_quantization: controller => {return <ImageQuantization controller={controller}/>},\r\n};\r\n\r\nexport default actionPicker;\r\n","import React, {Component} from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport ActionPicker from './ActionPicker';\r\nimport Window from '../windows/Window';\r\n\r\nclass Action extends Component {\r\n\r\n  renderAction() {\r\n    let currentAction = this.props.currentAction;\r\n    let controller = this.props.controller;\r\n\r\n    if (currentAction === undefined) {\r\n      return (<Typography>Pick any action from the menu.</Typography>);\r\n    } else {\r\n      return ActionPicker[currentAction](controller);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n        <Window title={this.props.currentActionName}>\r\n          {this.renderAction()}\r\n         </Window>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Action;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    width: '100%'\r\n  },\r\n});\r\n\r\nconst TITLE_MAX_LENGHT = 20;\r\n\r\nclass ImageTabs extends React.Component {\r\n  handleChange = (event, value) => {\r\n    this.props.controller.updateSelectedImage(value);\r\n  };\r\n\r\n  handleCloseEvent = (event, imageTitle) => {\r\n    this.props.controller.delete(this.props.controller.getImageIndex(imageTitle));\r\n    event.stopPropagation();\r\n  }\r\n\r\n  reduceTittle = (title) => {\r\n      if(title.length > TITLE_MAX_LENGHT){\r\n        title = title.slice(0, title.length).replace(/.{3}$/i, \"...\")\r\n      }\r\n\r\n    return title;\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const controller = this.props.controller;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n          {controller.isAnyImageSelected() && <AppBar\r\n              position=\"static\"\r\n              color=\"default\">\r\n            <Tabs\r\n                value={this.props.controller.getSelectedImageIndex()}\r\n                onChange={this.handleChange}\r\n                scrollable\r\n                scrollButtons=\"auto\"\r\n            >\r\n              {\r\n                controller.getImageTitles().map(\r\n                    title => <Tab\r\n                        component=\"div\"\r\n                        key={title}\r\n                        label={\r\n                          <div>\r\n                          {this.reduceTittle(title)}\r\n                        <IconButton style={{ marginRight: \"-20%\" }} color=\"secondary\" aria-label=\"Add an alarm\" onClick={e => this.handleCloseEvent(e, title)}>\r\n                          <Clear />\r\n                        </IconButton>\r\n                        </div>\r\n                      }/>\r\n                )\r\n              }\r\n            </Tabs>\r\n          </AppBar>}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nImageTabs.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(ImageTabs);\r\n","import React, {Component} from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport ProcessImage from '../../../processor/image/ProcessImage'\r\n\r\nlet containerStyles = {\r\n  padding: \"10px\",\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\"\r\n};\r\n\r\nclass WorkspaceBar extends Component {\r\n\r\n  calculateColor = () => {\r\n    let image = this.props.controller.getSelectedImage();\r\n    let {x, y} = this.props.position;\r\n\r\n    if (image === undefined\r\n        || !image.indexesAreInRange(x, y)\r\n        || x === -1\r\n        || y === -1) {\r\n      return \"white\";\r\n    } else {\r\n      return \"rgb(\" + image.getRedComponent(x, y) + \", \"\r\n                    + image.getGreenComponent(x, y) + \", \"\r\n                    + image.getBlueComponent(x, y) + \")\";\r\n    }\r\n  };\r\n\r\n  calculateColorText = () => {\r\n    let image = this.props.controller.getSelectedImage();\r\n    let {x, y} = this.props.position;\r\n\r\n    if (image === undefined\r\n        || !image.indexesAreInRange(x, y)\r\n        || x === -1\r\n        || y === -1) {\r\n      return \"r:- g:- b:-\";\r\n    } else {\r\n      return \"r:\" + image.getRedComponent(x, y) + \" \"\r\n           + \"g:\" + image.getGreenComponent(x, y) + \" \"\r\n           + \"b:\" + image.getBlueComponent(x, y) + \" \"\r\n    }\r\n  };\r\n\r\n  calculatePosition = () => {\r\n    let image = this.props.controller.getSelectedImage();\r\n    let {x, y} = this.props.position;\r\n    if (image === undefined || x === -1 || y === -1) {\r\n      return \"x:- y:-\";\r\n    } else {\r\n      return \"x:\" + x + \" \" + \"y:\" + y;\r\n    }\r\n  };\r\n\r\n  duplicateActualImage = () => {\r\n    if(this.props.controller.numberOfImages() > 0) {\r\n      let image = this.props.controller.getSelectedImage();\r\n      let newImage = new ProcessImage(image.getTitle() + \" - Duplicated.\" + image.getFormat(), image.getWidth(), image.getHeight(), image.getImageData().data);\r\n      this.props.controller.add(newImage);\r\n    }\r\n  }\r\n\r\n  updateImageState = operation => () => {\r\n      let {controller} = this.props;\r\n      let image = controller.getSelectedImage()\r\n      if (image !== undefined) {\r\n        switch (operation) {\r\n          case 'undo': {\r\n            image.setPreviousState();\r\n            break;\r\n          }\r\n          case 'redo': {\r\n            image.setNextState();\r\n            break;\r\n          }\r\n          case 'restore': {\r\n            image.setInitialState();\r\n            break;\r\n          }\r\n        }\r\n\r\n        controller.updateImageHistogram();\r\n        controller.updateImageCanvas();\r\n        controller.resetActionMethod(undefined);\r\n        controller.updateMethod();\r\n\r\n    }\r\n\r\n  };\r\n\r\n  render() {\r\n    return (\r\n        <Paper\r\n          style={containerStyles}>\r\n          <div>\r\n\r\n            <Chip\r\n                avatar={\r\n                  <Avatar\r\n                      style={{background: this.calculateColor()}}/>\r\n                }\r\n                style={{marginRight: \"5px\"}}\r\n                label={this.calculateColorText()}\r\n                color=\"secondary\"\r\n                variant=\"outlined\"/>\r\n          \r\n            <Chip\r\n                label={this.calculatePosition()}\r\n                color=\"secondary\"\r\n                variant=\"outlined\"/>\r\n          </div>\r\n          <div>\r\n          <span\r\n            style={{borderRight: \"1px solid #babdbe\"}}>\r\n          <IconButton\r\n              color=\"secondary\"\r\n              onClick={this.duplicateActualImage}>\r\n            <Icon>add_to_photos</Icon>\r\n          </IconButton>\r\n          </span>\r\n            <IconButton\r\n                color=\"secondary\"\r\n                onClick={this.updateImageState('undo')}>\r\n              <Icon>undo</Icon>\r\n            </IconButton>\r\n            <IconButton\r\n                color=\"secondary\"\r\n                onClick={this.updateImageState('restore')}>\r\n              <Icon>compare</Icon>\r\n            </IconButton>\r\n            <IconButton\r\n                color=\"secondary\"\r\n                onClick={this.updateImageState('redo')}>\r\n              <Icon>redo</Icon>\r\n            </IconButton>\r\n          </div>\r\n        </Paper>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WorkspaceBar;\r\n","import React, {Component} from 'react';\r\nimport Paper from '@material-ui/core/Paper'\r\nimport ImageTabs from './ImageTabs'\r\nimport theme from '../../theme/'\r\nimport WorkspaceBar from './WorkspaceBar';\r\nimport ProcessImage from '../../../processor/image/ProcessImage'\r\nimport RegionSelect from 'react-region-select';\r\nimport objectAssign from 'object-assign';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst workspaceStyle = {\r\n  background: theme.palette.primary.main,\r\n  height: \"100%\",\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignContent: \"stretch\"\r\n};\r\n\r\nconst canvasContainerStyle = {\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  alignItems: \"center\",\r\n  height: \"95%\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nconst regionStyle = {\r\n  background: 'rgba(0, 102, 204, 0.5)'\r\n};\r\n\r\n/**\r\n * Component used to render the main workspace\r\n * to work with images. It provides a tab\r\n * environment.\r\n * @param props\r\n */\r\nclass ImageWorkspace extends Component {\r\n  canvasRef;\r\n  state = {\r\n    x: -1,\r\n    y: -1,\r\n    regions: [],\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvasRef = React.createRef();\r\n    this.regionRenderer = this.regionRenderer.bind(this);\r\n\t\tthis.updateRegions = this.updateRegions.bind(this);\r\n    this.props.keyController(\"Escape\", this.handleKeyPress);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.controller.setCanvas(this.canvasRef.current);\r\n  }\r\n\r\n  canvasMovement = (event) => {\r\n    this.setState({x: event.nativeEvent.offsetX, y: event.nativeEvent.offsetY});\r\n  };\r\n\r\n  mouseLeaved = event => {\r\n    this.setState({x: -1, y: -1});\r\n  }\r\n\r\n setCropState = () => {\r\n    this.state.cropEnabled = !this.state.cropEnabled;\r\n }\r\n\r\nhandleCrop = () => {\r\n    let originalImageData = this.props.controller.getSelectedImage();\r\n\r\n    let fromX = originalImageData.getWidth() * (this.state.regions[0].x/100);\r\n    let fromY = originalImageData.getHeight() * (this.state.regions[0].y/100);\r\n    let toX =  originalImageData.getWidth() * (this.state.regions[0].width/100);\r\n    let toY =  originalImageData.getHeight() * (this.state.regions[0].height/100);\r\n\r\n    let ctx = this.props.controller.getCanvas().getContext('2d');\r\n    let imageData = ctx.getImageData(fromX, fromY, toX, toY);\r\n\r\n    this.handleKeyPress();\r\n    let image = new ProcessImage(originalImageData.getTitle() + \" - Copy.\" + originalImageData.getFormat(), imageData.width, imageData.height, imageData.data);\r\n    this.props.controller.add(image);\r\n\r\n}\r\n\r\n updateRegions (regions) {\r\n   if(this.props.controller.numberOfImages() > 0)\r\n      this.setState({\r\n\t\t      regions: regions\r\n       });\r\n\t}\r\n\r\n\tregionRenderer (regionProps) {\r\n\t\tif (!regionProps.isChanging) {\r\n\t\t\treturn (\r\n\r\n        <div style={{ position: 'absolute', bottom: '-2.5em'}}>\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={this.handleCrop}>\r\n        Crop\r\n      </Button>\r\n\r\n      </div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n  handleKeyPress = () => {\r\n    this.setState({ regions: [] });\r\n}\r\n\r\n  render() {\r\n    let showCropper = {display: this.props.controller.numberOfImages > 0 ? \"none\" : \"block\"}\r\n\r\n    return(\r\n        <Paper\r\n            style={workspaceStyle}>\r\n          <ImageTabs\r\n              controller={this.props.controller}/>\r\n          <div className=\"\" style={canvasContainerStyle}>\r\n          <RegionSelect\r\n\t\t\t\t\t\tmaxRegions={1}\r\n\t\t\t\t\t\tregions={this.state.regions}\r\n            regionStyle={regionStyle}\r\n\t\t\t\t\t\tconstraint\r\n            regionRenderer={this.regionRenderer}\r\n\t\t\t\t\t\tonChange={this.updateRegions}\r\n\t\t\t\t\t\tstyle={showCropper}\r\n\t\t\t\t\t>\r\n\r\n          <canvas\r\n                ref={this.canvasRef}\r\n                onMouseMove={this.canvasMovement}\r\n                onMouseLeave={this.mouseLeaved}>\r\n              Your browser do not support canvas\r\n          </canvas>\r\n          </RegionSelect>\r\n\r\n          </div>\r\n          <WorkspaceBar\r\n              position={this.state}\r\n              controller={this.props.controller}/>\r\n        </Paper>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default ImageWorkspace;\r\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport './footer.css'\r\nimport theme from '../../theme'\r\n\r\nconst aStyle = {\r\n  textDecoration: \"none\",\r\n  color: theme.palette.secondary.main\r\n}\r\n\r\nfunction footer() {\r\n  return(\r\n      <React.Fragment>\r\n        <Typography>\r\n          <span>By </span>\r\n          <a\r\n              style={aStyle}\r\n              href=\"https://github.com/CristianAbrante\">\r\n            Cristian Abrante\r\n          </a>\r\n          <span> & </span>\r\n          <a\r\n              style={aStyle}\r\n              href=\"https://github.com/AlberTJ97\">\r\n            Alberto González\r\n          </a>\r\n        </Typography>\r\n      </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default footer;","import ProcessImage from './ProcessImage';\r\n\r\nclass Histogram {\r\n  image;\r\n  count = {\r\n    r: [],\r\n    g: [],\r\n    b: [],\r\n    brightness: []\r\n  };\r\n\r\n  accumulative = {\r\n    r: [],\r\n    g: [],\r\n    b: [],\r\n    brightness: []\r\n  };\r\n\r\n  min = {\r\n    r: 0,\r\n    g: 0,\r\n    b: 0,\r\n    brightness: 0\r\n  };\r\n\r\n  max = {\r\n    r: 0,\r\n    g: 0,\r\n    b: 0,\r\n    brightness: 0\r\n  };\r\n\r\n  mean = {\r\n    r: 0,\r\n    g: 0,\r\n    b: 0,\r\n    brightness: 0\r\n  };\r\n\r\n  stdVar = {\r\n    r: 0,\r\n    g: 0,\r\n    b: 0,\r\n    brightness: 0\r\n  };\r\n\r\n  entropy = {\r\n    r: 0,\r\n    g: 0,\r\n    b: 0,\r\n    brightness: 0\r\n  };\r\n\r\n  constructor(image) {\r\n    this.setImage(image);\r\n  }\r\n\r\n  setImage = image => {\r\n    this.image = image;\r\n    this.setCount();\r\n    this.setAccumulativeCount();\r\n    this.setMean();\r\n    this.setStdVar();\r\n    this.setMinMax();\r\n    this.setEntropy();\r\n  };\r\n\r\n  getCount = level => {\r\n    return {\r\n      r: this.count.r[level],\r\n      g: this.count.g[level],\r\n      b: this.count.b[level],\r\n      brightness: this.count.brightness[level]\r\n    }\r\n  };\r\n\r\n  getAccumulativeCount = level => {\r\n    return {\r\n      r: this.accumulative.r[level],\r\n      g: this.accumulative.g[level],\r\n      b: this.accumulative.b[level],\r\n      brightness: this.accumulative.brightness[level]\r\n    }\r\n  };\r\n\r\n  getProbability = level => {\r\n    return {\r\n      r: this.getCount(level).r / this.getNumberOfPixels(),\r\n      g: this.getCount(level).g / this.getNumberOfPixels(),\r\n      b: this.getCount(level).b / this.getNumberOfPixels(),\r\n      brightness: this.getCount(level).brightness / this.getNumberOfPixels()\r\n    }\r\n  };\r\n\r\n  getAccumulativeProbability = level => {\r\n    return {\r\n      r: this.getAccumulativeCount(level).r / this.getNumberOfPixels(),\r\n      g: this.getAccumulativeCount(level).g / this.getNumberOfPixels(),\r\n      b: this.getAccumulativeCount(level).b / this.getNumberOfPixels(),\r\n      brightness: this.getAccumulativeCount(level).brightness / this.getNumberOfPixels()\r\n    }\r\n  };\r\n\r\n  getMean = () => {\r\n    return this.mean;\r\n  };\r\n\r\n  getStdVar = () => {\r\n    return this.stdVar;\r\n  };\r\n\r\n  getMax = () => {\r\n    return this.max;\r\n  };\r\n\r\n  getMin = () => {\r\n    return this.min;\r\n  };\r\n\r\n  getEntropy = () => {\r\n    return this.entropy;\r\n  };\r\n\r\n  getImage = () => {\r\n    return this.image;\r\n  };\r\n\r\n  getImageWidth = () => {\r\n    return this.getImage().getWidth();\r\n  };\r\n\r\n  getImageHeight = () => {\r\n    return this.getImage().getHeight();\r\n  };\r\n\r\n  getNumberOfPixels = () => {\r\n    return this.getImage().getNumberOfPixels();\r\n  };\r\n\r\n  getFormattedCount = component => {\r\n    return this.formatData(this.count[component]);\r\n  };\r\n\r\n  getFormattedAccumulativeCount = component => {\r\n    return this.formatData(this.accumulative[component]);\r\n  };\r\n\r\n  getFormattedData = (component, accumulative) => {\r\n    if (accumulative) {\r\n      return this.getFormattedAccumulativeCount(component);\r\n    } else {\r\n      return this.getFormattedCount(component);\r\n    }\r\n  };\r\n\r\n  formatData = array => {\r\n    let data = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n      data.push({x: i, y: array[i]});\r\n    }\r\n    return data;\r\n  };\r\n\r\n  initializeObject = obj => {\r\n    let components = Object.keys(obj);\r\n    for (let k = 0; k < components.length; k++) {\r\n      obj[components[k]] =\r\n          Array.apply(null, Array(ProcessImage.MAX_PIXEL_VALUE)).fill(0);\r\n    }\r\n  };\r\n\r\n  setCount = () => {\r\n    this.initializeObject(this.count);\r\n    let components = Object.keys(this.count);\r\n    for (let i = 0; i < this.getImageWidth(); i++) {\r\n      for (let j = 0; j < this.getImageHeight(); j++) {\r\n        if (this.image.getAlphaComponent(i, j) !== 0) {\r\n          for (let k = 0; k < components.length; k++) {\r\n            let component = components[k];\r\n            let value = this.image.getColor(i, j, component);\r\n            this.count[component][value] += 1;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  setAccumulativeCount = () => {\r\n    this.initializeObject(this.accumulative);\r\n    let components = Object.keys(this.accumulative);\r\n    for (let k = 0; k < components.length; k++) {\r\n      let component = components[k];\r\n      this.accumulative[component][0] = this.getCount(0)[component];\r\n    }\r\n    for (let i = 1; i < ProcessImage.MAX_PIXEL_VALUE; i++) {\r\n      for (let k = 0; k < components.length; k++) {\r\n        let component = components[k];\r\n        let prevValue = this.getAccumulativeCount(i - 1)[component];\r\n        let actualValue = this.getCount(i)[component];\r\n        this.accumulative[component][i] = prevValue + actualValue;\r\n      }\r\n    }\r\n  };\r\n\r\n  setMean = () => {\r\n    let components = Object.keys(this.mean);\r\n    for (let i = 0; i < ProcessImage.MAX_PIXEL_VALUE; i++) {\r\n      for (let k = 0; k < components.length; k++) {\r\n        let component = components[k];\r\n        this.mean[component] += this.getCount(i)[component] * i;\r\n      }\r\n    }\r\n    for (let k = 0; k < components.length; k++) {\r\n      let component = components[k];\r\n      this.mean[component] /= this.getNumberOfPixels();\r\n    }\r\n  };\r\n\r\n  setStdVar = () => {\r\n    let components = Object.keys(this.stdVar);\r\n    for (let i = 0; i < ProcessImage.MAX_PIXEL_VALUE; i++) {\r\n      for (let k = 0; k < components.length; k++) {\r\n        let component = components[k];\r\n        this.stdVar[component] +=\r\n            this.getCount(i)[component] * Math.pow(i - this.mean[component], 2);\r\n      }\r\n    }\r\n    for (let k = 0; k < components.length; k++) {\r\n      let component = components[k];\r\n      this.stdVar[component] =\r\n          Math.sqrt(this.stdVar[component] / this.getNumberOfPixels());\r\n    }\r\n  };\r\n\r\n  setMinMax = () => {\r\n    let components = Object.keys(this.min);\r\n    let selected = {};\r\n    for (let k = 0; k < components.length; k++) {\r\n      selected[components[k]] = false;\r\n    }\r\n    for (let i = 0; i < ProcessImage.MAX_PIXEL_VALUE; i++) {\r\n      for (let k = 0; k < components.length; k++) {\r\n        let component = components[k];\r\n        if (this.getCount(i)[component] !== 0) {\r\n          if (!selected[component]) {\r\n            this.min[component] = i;\r\n            selected[component] = true;\r\n          }\r\n          this.max[component] = i;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  setEntropy = () => {\r\n    this.entropy = {\r\n      r: 0,\r\n      g: 0,\r\n      b: 0,\r\n      brightness: 0\r\n    };\r\n\r\n    let components = Object.keys(this.entropy);\r\n    for (let i = 0; i < ProcessImage.MAX_PIXEL_VALUE; i++) {\r\n      for (let k = 0; k < components.length; k++) {\r\n        let component = components[k];\r\n        let p = this.getProbability(i)[component];\r\n        if (p !== 0 && p >= 0) {\r\n          this.entropy[component] += p * Math.log2(p);\r\n        }\r\n      }\r\n    }\r\n    for (let k = 0; k < components.length; k++) {\r\n      let component = components[k];\r\n      this.entropy[component] = -this.entropy[component];\r\n    }\r\n  };\r\n}\r\n\r\nexport default Histogram;\r\n","import Histogram from '../image/Histogram';\r\n\r\nclass ImageController {\r\n  images;\r\n  histograms;\r\n  canvas;\r\n  updateMethod;\r\n  resetActionMethod;\r\n  selected;\r\n\r\n  constructor(updateMethod, resetActionMethod) {\r\n    this.images = [];\r\n    this.histograms = [];\r\n    this.updateMethod = updateMethod;\r\n    this.resetActionMethod = resetActionMethod;\r\n  }\r\n\r\n  add = (image) => {\r\n    this.images.push(image);\r\n    this.histograms.push(new Histogram(image));\r\n    this.selected = this.numberOfImages() - 1;\r\n    this.updateImageCanvas();\r\n    this.resetActionMethod(undefined);\r\n    this.updateMethod();\r\n  };\r\n\r\n  delete = (index) => {\r\n    if(index > -1) {\r\n      this.images.splice(index, 1);\r\n      this.histograms.splice(index, 1);\r\n    }\r\n\r\n    if(this.selected == this.images.length || this.selected > index){\r\n      this.selected--;\r\n    } else if(index == this.selected && (index < this.selected || index > this.selected)){\r\n      this.selected--;\r\n    }\r\n\r\n    this.updateImageCanvas();\r\n    this.resetActionMethod(undefined);\r\n    this.updateMethod();\r\n  }\r\n\r\n  numberOfImages = () => {\r\n    return this.images.length;\r\n  };\r\n\r\n  getImageTitles = () => {\r\n    return this.images.map(image => {return image.getTitle()});\r\n  };\r\n\r\n  setCanvas = canvas => {\r\n    this.canvas = canvas;\r\n  };\r\n\r\n  getCanvas = () => {\r\n    return this.canvas;\r\n  }\r\n\r\n  updateSelectedImage = index => {\r\n    this.selected = index;\r\n    this.updateImageCanvas();\r\n    this.resetActionMethod(undefined);\r\n    this.updateMethod();\r\n  };\r\n\r\n  setImage = (index, image) => {\r\n    this.images[index] = image;\r\n    this.updateImageCanvas();\r\n    this.resetActionMethod(undefined);\r\n    this.updateMethod();\r\n  }\r\n\r\n  updateImageCanvas = () => {\r\n    let imageToDisplay = this.getSelectedImage();\r\n    let ctx = this.canvas.getContext('2d');\r\n\r\n    if(imageToDisplay !== undefined){\r\n      this.canvas.width = imageToDisplay.getWidth();\r\n      this.canvas.height = imageToDisplay.getHeight();\r\n      ctx.putImageData(imageToDisplay.getImageData(), 0, 0);\r\n    }else{\r\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n  };\r\n\r\n  getSelectedImage = () => {\r\n    return this.images[this.getSelectedImageIndex()];\r\n  };\r\n\r\n  getCurrentHistogram = () => {\r\n    return this.histograms[this.getSelectedImageIndex()];\r\n  };\r\n\r\n  getSelectedImageIndex = () => {\r\n    return this.selected;\r\n  };\r\n\r\n  applyPointOperation(table, component) {\r\n    let image = this.getSelectedImage();\r\n    for (let i = 0; i < image.getWidth(); i++) {\r\n      for (let j = 0; j < image.getHeight(); j++) {\r\n        image.setPreviousState();\r\n        let imageColor = image.getColor(i, j, component);\r\n        image.setNextState();\r\n        let tableColor = table.getValue(imageColor);\r\n        image.setColor(i, j, component, tableColor);\r\n      }\r\n    }\r\n    this.updateImageHistogram();\r\n    this.updateImageCanvas();\r\n    this.updateMethod();\r\n  }\r\n\r\n  isAnyImageSelected = () => {\r\n    return this.images.length !== 0;\r\n  };\r\n\r\n  updateImageHistogram = () => {\r\n    let histogram = this.histograms[this.getSelectedImageIndex()];\r\n    histogram.setImage(this.getSelectedImage());\r\n  };\r\n\r\n  getImageIndex = title => {\r\n    let titles = this.getImageTitles();\r\n    for (let i = 0; i < titles.length; i++) {\r\n      if (titles[i] === title)\r\n        return i;\r\n    };\r\n    return undefined;\r\n  };\r\n\r\n  static imageIsValid(image) {\r\n    if (image === undefined) {\r\n      return false;\r\n    }\r\n    if (image.getImageData() === undefined) {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ImageController;\r\n","import React, { Component } from \"react\";\r\nimport './App.css';\r\nimport MainMenu from \"./components/layout/menu/MainMenu\";\r\nimport MenuData from \"./data/menu\";\r\nimport Info from \"./components/layout/info/Info\";\r\nimport Action from \"./components/layout/actions/Action\";\r\nimport ImageWorkspace from \"./components/layout/image-workspace/ImageWorkspace\"\r\nimport Footer from \"./components/layout/footer/\"\r\nimport Theme from \"./components/theme\"\r\n\r\nimport ImageController from './processor/controller/ImageController';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { MuiThemeProvider} from '@material-ui/core/styles';\r\n\r\nimport KeyHandler, { KEYDOWN } from 'react-key-handler';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    controller: undefined,\r\n    currentAction: undefined,\r\n    onKeyPressed: undefined,\r\n    keyAction: undefined\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state.controller = new ImageController(this.updateController, this.updateCurrentAction);\r\n  }\r\n\r\n  updateController = () => {\r\n    this.setState({controller: this.state.controller});\r\n  };\r\n\r\n  updateCurrentAction = (action) => {\r\n    this.setState({currentAction: action});\r\n  };\r\n\r\n  getCurrentActionName = () => {\r\n    let actionName = \"Action\";\r\n    const currentAction = this.state.currentAction;\r\n\r\n    let name = MenuData.items.some(item => {\r\n      let options = item.options;\r\n      let array = options.filter(function(options){ return options.id == currentAction });\r\n      actionName = array.length > 0 ? array[0].name : actionName;\r\n    });\r\n\r\n    return actionName;\r\n  };\r\n\r\n  updateKeyController = (key, action) => {\r\n    this.setState({onKeyPressed: key, keyAction: action});\r\n  };\r\n\r\n  render() {\r\n    const gridContainerClass = \"grid-container\";\r\n    const gridItemClass = \"grid-item\";\r\n\r\n    let currentActionName = this.getCurrentActionName();\r\n    return (\r\n      <MuiThemeProvider theme={Theme}>\r\n        <div className={gridContainerClass + \" App\"}>\r\n        <KeyHandler\r\n            keyEventName={KEYDOWN}\r\n            keyValue={this.state.onKeyPressed}\r\n            onKeyHandle={this.state.keyAction}\r\n          />\r\n          <div className={gridItemClass + \" item-menu\"}>\r\n            <MainMenu\r\n                items={MenuData.items}\r\n                updateAction={this.updateCurrentAction}/>\r\n          </div>\r\n          <div className={gridItemClass + \" item-workspace\"}>\r\n            <ImageWorkspace\r\n                controller={this.state.controller}\r\n                keyController={this.updateKeyController}\r\n                />\r\n          </div>\r\n\r\n          <div className={gridItemClass + \" item-info\"}>\r\n            <Info\r\n                theme={Theme}\r\n                currentActionName={currentActionName}\r\n                controller={this.state.controller}/>\r\n          </div>\r\n          <div className={gridItemClass + \" item-action\"}>\r\n            <Action\r\n                controller={this.state.controller}\r\n                currentAction={this.state.currentAction}\r\n                currentActionName={currentActionName}/>\r\n          </div>\r\n          <div style={{display: 'none' }} className={gridItemClass + \" item-footer\"}>\r\n            <Footer />\r\n          </div>\r\n\r\n        </div>\r\n      </MuiThemeProvider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}